diff --git a/node_modules/@morbidick/lit-element-notify/index.d.ts b/node_modules/@morbidick/lit-element-notify/index.d.ts
new file mode 100644
index 0000000..3f72dbe
--- /dev/null
+++ b/node_modules/@morbidick/lit-element-notify/index.d.ts
@@ -0,0 +1 @@
+export { LitNotify } from './notify';
diff --git a/node_modules/@morbidick/lit-element-notify/notify.d.ts b/node_modules/@morbidick/lit-element-notify/notify.d.ts
new file mode 100644
index 0000000..607f43e
--- /dev/null
+++ b/node_modules/@morbidick/lit-element-notify/notify.d.ts
@@ -0,0 +1,14 @@
+import { PropertyDeclaration, LitElement } from 'lit-element';
+
+type Constructor<T = LitElement> = new (...args: any[]) => T;
+
+interface AugmentedPropertyDeclaration extends PropertyDeclaration {
+  /** When true will notify. Pass a string to define the event name to fire. */
+  notify: string|Boolean
+}
+
+declare class NotifyingElement {
+  static createProperty(name: string, options: AugmentedPropertyDeclaration): void
+}
+
+export function LitNotify<T>(baseElement: Constructor<LitElement>): LitElement & NotifyingElement
diff --git a/node_modules/@morbidick/lit-element-notify/notify.js b/node_modules/@morbidick/lit-element-notify/notify.js
index b6790b2..e323d7a 100644
--- a/node_modules/@morbidick/lit-element-notify/notify.js
+++ b/node_modules/@morbidick/lit-element-notify/notify.js
@@ -1,59 +1,47 @@
+/** @typedef {import('lit-element').PropertyDeclaration & { notify: string|Boolean }} AugmentedPropertyDeclaration */
+
 /**
- * Returns the event name for the given property.
+ * @template TBase
+ * @typedef {new (...args: any[]) => import('lit-element').LitElement & TBase} Constructor
  */
-export function eventNameForProperty(name, options = {}) {
-    if (options.notify && typeof options.notify === 'string') {
-        return options.notify;
-    }
 
-    if (options.attribute && typeof options.attribute === 'string') {
-        return `${options.attribute}-changed`;
+/**
+ * Returns the event name for the given property.
+ * @param  {string}                       name    property name
+ * @param  {AugmentedPropertyDeclaration} options property declaration
+ * @return                                event name to fire
+ */
+export function eventNameForProperty(name, { notify, attribute } = {}) {
+    if (notify && typeof notify === 'string') {
+        return notify;
+    } else if (attribute && typeof attribute === 'string') {
+        return `${attribute}-changed`;
+    } else {
+      return `${name.toLowerCase()}-changed`;
     }
-
-    return `${name.toLowerCase()}-changed`;
 }
 
+// eslint-disable-next-line valid-jsdoc
 /**
  * Enables the nofity option for properties to fire change notification events
  *
- * @param {LitElement} baseElement - the LitElement to extend
+ * @template TBase
+ * @param {Constructor<TBase>} baseElement
  */
-export const LitNotify = (baseElement) => class extends baseElement {
-    /**
-     * Extend the LitElement `createProperty` method to map properties to events
-     */
-    static createProperty(name, options) {
-        super.createProperty(name, options);
-
-        if (!this.hasOwnProperty('_propertyEventMap')) {
-            this._propertyEventMap = new Map();
-        }
-
-        if (options.notify) {
-            this._propertyEventMap.set(name, eventNameForProperty(name, options));
-        }
-    }
-
+export const LitNotify = (baseElement) => class NotifyingElement extends baseElement {
     /**
      * check for changed properties with notify option and fire the events
      */
     update(changedProps) {
         super.update(changedProps);
 
-        if (!this.constructor._propertyEventMap) {
-            return;
-        }
-
-        for (const [eventProp, eventName] of this.constructor._propertyEventMap.entries()) {
-            if (changedProps.has(eventProp)) {
-                this.dispatchEvent(new CustomEvent(eventName, {
-                    detail: {
-                        value: this[eventProp],
-                    },
-                    bubbles: false,
-                    composed: true,
-                }));
-            }
+        for (const prop of changedProps.keys()) {
+          const declaration = this.constructor._classProperties.get(prop)
+          if (!declaration.notify) return;
+          const type = eventNameForProperty(prop, declaration)
+          const value = this[prop]
+          console.log(prop, type, value, declaration)
+          this.dispatchEvent(new CustomEvent(type, { detail: { value } }));
         }
     }
 };
