diff --git a/node_modules/credit-card-type/.DS_Store b/node_modules/credit-card-type/.DS_Store
new file mode 100644
index 0000000..a9a2687
Binary files /dev/null and b/node_modules/credit-card-type/.DS_Store differ
diff --git a/node_modules/credit-card-type/index.js b/node_modules/credit-card-type/index.js
index f3b5c28..f77a70d 100644
--- a/node_modules/credit-card-type/index.js
+++ b/node_modules/credit-card-type/index.js
@@ -1,15 +1,13 @@
-'use strict';
+import types from './lib/card-types';
+import clone from './lib/clone';
+import findBestMatch from './lib/find-best-match';
+import isValidInputType from './lib/is-valid-input-type';
+import addMatchingCardsToResults from './lib/add-matching-cards-to-results';
 
-var types = require('./lib/card-types');
-var clone = require('./lib/clone');
-var findBestMatch = require('./lib/find-best-match');
-var isValidInputType = require('./lib/is-valid-input-type');
-var addMatchingCardsToResults = require('./lib/add-matching-cards-to-results');
+let testOrder;
+let customCards = {};
 
-var testOrder;
-var customCards = {};
-
-var cardNames = {
+const cardNames = {
   VISA: 'visa',
   MASTERCARD: 'mastercard',
   AMERICAN_EXPRESS: 'american-express',
@@ -21,10 +19,10 @@ var cardNames = {
   ELO: 'elo',
   MIR: 'mir',
   HIPER: 'hiper',
-  HIPERCARD: 'hipercard'
+  HIPERCARD: 'hipercard',
 };
 
-var ORIGINAL_TEST_ORDER = [
+const ORIGINAL_TEST_ORDER = [
   cardNames.VISA,
   cardNames.MASTERCARD,
   cardNames.AMERICAN_EXPRESS,
@@ -36,7 +34,7 @@ var ORIGINAL_TEST_ORDER = [
   cardNames.ELO,
   cardNames.MIR,
   cardNames.HIPER,
-  cardNames.HIPERCARD
+  cardNames.HIPERCARD,
 ];
 
 testOrder = clone(ORIGINAL_TEST_ORDER);
@@ -46,24 +44,24 @@ function findType(type) {
 }
 
 function getAllCardTypes() {
-  return testOrder.map(function (type) {
+  return testOrder.map(function(type) {
     return clone(findType(type));
   });
 }
 
 function getCardPosition(name, ignoreErrorForNotExisting) {
-  var position = testOrder.indexOf(name);
+  const position = testOrder.indexOf(name);
 
   if (!ignoreErrorForNotExisting && position === -1) {
-    throw new Error('"' + name + '" is not a supported card type.');
+    throw new Error(`"${name}" is not a supported card type.`);
   }
 
   return position;
 }
 
-function creditCardType(cardNumber) {
-  var bestMatch;
-  var results = [];
+export default function creditCardType(cardNumber) {
+  let bestMatch;
+  const results = [];
 
   if (!isValidInputType(cardNumber)) {
     return [];
@@ -73,8 +71,8 @@ function creditCardType(cardNumber) {
     return getAllCardTypes(testOrder);
   }
 
-  testOrder.forEach(function (type) {
-    var cardConfiguration = findType(type);
+  testOrder.forEach(function(type) {
+    const cardConfiguration = findType(type);
 
     addMatchingCardsToResults(cardNumber, cardConfiguration, results);
   });
@@ -88,18 +86,18 @@ function creditCardType(cardNumber) {
   return results;
 }
 
-creditCardType.getTypeInfo = function (type) {
+export function getTypeInfo(type) {
   return clone(findType(type));
 };
 
-creditCardType.removeCard = function (name) {
-  var position = getCardPosition(name);
+export function removeCard(name) {
+  const position = getCardPosition(name);
 
   testOrder.splice(position, 1);
 };
 
-creditCardType.addCard = function (config) {
-  var existingCardPosition = getCardPosition(config.type, true);
+export function addCard(config) {
+  const existingCardPosition = getCardPosition(config.type, true);
 
   customCards[config.type] = config;
 
@@ -108,12 +106,12 @@ creditCardType.addCard = function (config) {
   }
 };
 
-creditCardType.updateCard = function (cardType, updates) {
-  var clonedCard;
-  var originalObject = customCards[cardType] || types[cardType];
+export function updateCard(cardType, updates) {
+  let clonedCard;
+  const originalObject = customCards[cardType] || types[cardType];
 
   if (!originalObject) {
-    throw new Error('"' + cardType + '" is not a recognized type. Use `addCard` instead.');
+    throw new Error(`"${cardType}" is not a recognized type. Use \`addCard\` instead.`);
   }
 
   if (updates.type && originalObject.type !== updates.type) {
@@ -122,7 +120,7 @@ creditCardType.updateCard = function (cardType, updates) {
 
   clonedCard = clone(originalObject, true);
 
-  Object.keys(clonedCard).forEach(function (key) {
+  Object.keys(clonedCard).forEach(function(key) {
     if (updates[key]) {
       clonedCard[key] = updates[key];
     }
@@ -131,18 +129,28 @@ creditCardType.updateCard = function (cardType, updates) {
   customCards[clonedCard.type] = clonedCard;
 };
 
-creditCardType.changeOrder = function (name, position) {
-  var currentPosition = getCardPosition(name);
+export function changeOrder(name, position) {
+  const currentPosition = getCardPosition(name);
 
   testOrder.splice(currentPosition, 1);
   testOrder.splice(position, 0, name);
 };
 
-creditCardType.resetModifications = function () {
+export function resetModifications() {
   testOrder = clone(ORIGINAL_TEST_ORDER);
   customCards = {};
 };
 
-creditCardType.types = cardNames;
+creditCardType.getTypeInfo = getTypeInfo
+
+creditCardType.removeCard = removeCard
+
+creditCardType.addCard = addCard
 
-module.exports = creditCardType;
+creditCardType.updateCard = updateCard
+
+creditCardType.changeOrder = changeOrder
+
+creditCardType.resetModifications = resetModifications
+
+creditCardType.types = cardNames;
diff --git a/node_modules/credit-card-type/lib/add-matching-cards-to-results.js b/node_modules/credit-card-type/lib/add-matching-cards-to-results.js
index 4b6efae..712d25f 100644
--- a/node_modules/credit-card-type/lib/add-matching-cards-to-results.js
+++ b/node_modules/credit-card-type/lib/add-matching-cards-to-results.js
@@ -1,10 +1,8 @@
-'use strict';
+import clone from './clone';
+import matches from './matches';
 
-var clone = require('./clone');
-var matches = require('./matches');
-
-function addMatchingCardsToResults(cardNumber, cardConfiguration, results) {
-  var i, pattern, patternLength, clonedCardConfiguration;
+export default function addMatchingCardsToResults(cardNumber, cardConfiguration, results) {
+  let i; let pattern; let patternLength; let clonedCardConfiguration;
 
   for (i = 0; i < cardConfiguration.patterns.length; i++) {
     pattern = cardConfiguration.patterns[i];
@@ -29,5 +27,3 @@ function addMatchingCardsToResults(cardNumber, cardConfiguration, results) {
     break;
   }
 }
-
-module.exports = addMatchingCardsToResults;
diff --git a/node_modules/credit-card-type/lib/card-types.js b/node_modules/credit-card-type/lib/card-types.js
index 03480d4..86d94c6 100644
--- a/node_modules/credit-card-type/lib/card-types.js
+++ b/node_modules/credit-card-type/lib/card-types.js
@@ -1,20 +1,18 @@
-'use strict';
-
-var cardTypes = {
-  visa: {
+export default {
+  'visa': {
     niceType: 'Visa',
     type: 'visa',
     patterns: [
-      4
+      4,
     ],
     gaps: [4, 8, 12],
     lengths: [16, 18, 19],
     code: {
       name: 'CVV',
-      size: 3
-    }
+      size: 3,
+    },
   },
-  mastercard: {
+  'mastercard': {
     niceType: 'Mastercard',
     type: 'mastercard',
     patterns: [
@@ -23,28 +21,28 @@ var cardTypes = {
       [223, 229],
       [23, 26],
       [270, 271],
-      2720
+      2720,
     ],
     gaps: [4, 8, 12],
     lengths: [16],
     code: {
       name: 'CVC',
-      size: 3
-    }
+      size: 3,
+    },
   },
   'american-express': {
     niceType: 'American Express',
     type: 'american-express',
     patterns: [
       34,
-      37
+      37,
     ],
     gaps: [4, 10],
     lengths: [15],
     code: {
       name: 'CID',
-      size: 4
-    }
+      size: 4,
+    },
   },
   'diners-club': {
     niceType: 'Diners Club',
@@ -53,46 +51,46 @@ var cardTypes = {
       [300, 305],
       36,
       38,
-      39
+      39,
     ],
     gaps: [4, 10],
     lengths: [14, 16, 19],
     code: {
       name: 'CVV',
-      size: 3
-    }
+      size: 3,
+    },
   },
-  discover: {
+  'discover': {
     niceType: 'Discover',
     type: 'discover',
     patterns: [
       6011,
       [644, 649],
-      65
+      65,
     ],
     gaps: [4, 8, 12],
     lengths: [16, 19],
     code: {
       name: 'CID',
-      size: 3
-    }
+      size: 3,
+    },
   },
-  jcb: {
+  'jcb': {
     niceType: 'JCB',
     type: 'jcb',
     patterns: [
       2131,
       1800,
-      [3528, 3589]
+      [3528, 3589],
     ],
     gaps: [4, 8, 12],
     lengths: [16, 17, 18, 19],
     code: {
       name: 'CVV',
-      size: 3
-    }
+      size: 3,
+    },
   },
-  unionpay: {
+  'unionpay': {
     niceType: 'UnionPay',
     type: 'unionpay',
     patterns: [
@@ -120,16 +118,16 @@ var cardTypes = {
       [8110, 8131],
       [8132, 8151],
       [8152, 8163],
-      [8164, 8171]
+      [8164, 8171],
     ],
     gaps: [4, 8, 12],
     lengths: [14, 15, 16, 17, 18, 19],
     code: {
       name: 'CVN',
-      size: 3
-    }
+      size: 3,
+    },
   },
-  maestro: {
+  'maestro': {
     niceType: 'Maestro',
     type: 'maestro',
     patterns: [
@@ -139,16 +137,16 @@ var cardTypes = {
       [56, 59],
       63,
       67,
-      6
+      6,
     ],
     gaps: [4, 8, 12],
     lengths: [12, 13, 14, 15, 16, 17, 18, 19],
     code: {
       name: 'CVC',
-      size: 3
-    }
+      size: 3,
+    },
   },
-  elo: {
+  'elo': {
     niceType: 'Elo',
     type: 'elo',
     patterns: [
@@ -176,29 +174,29 @@ var cardTypes = {
       [650901, 650978],
       [651652, 651679],
       [655000, 655019],
-      [655021, 655058]
+      [655021, 655058],
     ],
     gaps: [4, 8, 12],
     lengths: [16],
     code: {
       name: 'CVE',
-      size: 3
-    }
+      size: 3,
+    },
   },
-  mir: {
+  'mir': {
     niceType: 'Mir',
     type: 'mir',
     patterns: [
-      [2200, 2204]
+      [2200, 2204],
     ],
     gaps: [4, 8, 12],
     lengths: [16, 17, 18, 19],
     code: {
       name: 'CVP2',
-      size: 3
-    }
+      size: 3,
+    },
   },
-  hiper: {
+  'hiper': {
     niceType: 'Hiper',
     type: 'hiper',
     patterns: [
@@ -206,28 +204,26 @@ var cardTypes = {
       637568,
       637599,
       637609,
-      637612
+      637612,
     ],
     gaps: [4, 8, 12],
     lengths: [16],
     code: {
       name: 'CVC',
-      size: 3
-    }
+      size: 3,
+    },
   },
-  hipercard: {
+  'hipercard': {
     niceType: 'Hipercard',
     type: 'hipercard',
     patterns: [
-      606282
+      606282,
     ],
     gaps: [4, 8, 12],
     lengths: [16],
     code: {
       name: 'CVC',
-      size: 3
-    }
-  }
+      size: 3,
+    },
+  },
 };
-
-module.exports = cardTypes;
diff --git a/node_modules/credit-card-type/lib/clone.js b/node_modules/credit-card-type/lib/clone.js
index f11062f..bee0c46 100644
--- a/node_modules/credit-card-type/lib/clone.js
+++ b/node_modules/credit-card-type/lib/clone.js
@@ -1,13 +1,5 @@
-'use strict';
-
-function clone(originalObject) {
-  var dupe;
-
+export default function clone(originalObject) {
   if (!originalObject) { return null; }
 
-  dupe = JSON.parse(JSON.stringify(originalObject));
-
-  return dupe;
+  return JSON.parse(JSON.stringify(originalObject));
 }
-
-module.exports = clone;
diff --git a/node_modules/credit-card-type/lib/find-best-match.js b/node_modules/credit-card-type/lib/find-best-match.js
index 7319f6d..02dba2a 100644
--- a/node_modules/credit-card-type/lib/find-best-match.js
+++ b/node_modules/credit-card-type/lib/find-best-match.js
@@ -1,7 +1,5 @@
-'use strict';
-
 function hasEnoughResultsToDetermineBestMatch(results) {
-  var numberOfResultsWithMaxStrengthProperty = results.filter(function (result) {
+  let numberOfResultsWithMaxStrengthProperty = results.filter(function(result) {
     return result.matchStrength;
   }).length;
 
@@ -12,12 +10,12 @@ function hasEnoughResultsToDetermineBestMatch(results) {
     numberOfResultsWithMaxStrengthProperty === results.length;
 }
 
-function findBestMatch(results) {
+export default function findBestMatch(results) {
   if (!hasEnoughResultsToDetermineBestMatch(results)) {
     return;
   }
 
-  return results.reduce(function (bestMatch, result) { // eslint-disable-line consistent-return
+  return results.reduce(function(bestMatch, result) { // eslint-disable-line consistent-return
     if (!bestMatch) {
       return result;
     }
@@ -31,5 +29,3 @@ function findBestMatch(results) {
     return bestMatch;
   });
 }
-
-module.exports = findBestMatch;
diff --git a/node_modules/credit-card-type/lib/is-valid-input-type.js b/node_modules/credit-card-type/lib/is-valid-input-type.js
index 793c308..9078321 100644
--- a/node_modules/credit-card-type/lib/is-valid-input-type.js
+++ b/node_modules/credit-card-type/lib/is-valid-input-type.js
@@ -1,7 +1,3 @@
-'use strict';
-
-function isValidInputType(cardNumber) {
+export default function isValidInputType(cardNumber) {
   return typeof cardNumber === 'string' || cardNumber instanceof String;
 }
-
-module.exports = isValidInputType;
diff --git a/node_modules/credit-card-type/lib/matches.js b/node_modules/credit-card-type/lib/matches.js
index 36ecdcd..5a379c2 100644
--- a/node_modules/credit-card-type/lib/matches.js
+++ b/node_modules/credit-card-type/lib/matches.js
@@ -1,10 +1,8 @@
-'use strict';
-
 // Adapted from https://github.com/polvo-labs/card-type/blob/aaab11f80fa1939bccc8f24905a06ae3cd864356/src/cardType.js#L37-L42
 function matchesRange(cardNumber, min, max) {
-  var maxLengthToCheck = String(min).length;
-  var substr = cardNumber.substr(0, maxLengthToCheck);
-  var integerRepresentationOfCardNumber = parseInt(substr, 10);
+  const maxLengthToCheck = String(min).length;
+  const substr = cardNumber.substr(0, maxLengthToCheck);
+  const integerRepresentationOfCardNumber = parseInt(substr, 10);
 
   min = parseInt(String(min).substr(0, substr.length), 10);
   max = parseInt(String(max).substr(0, substr.length), 10);
@@ -18,12 +16,10 @@ function matchesPattern(cardNumber, pattern) {
   return pattern.substring(0, cardNumber.length) === cardNumber.substring(0, pattern.length);
 }
 
-function matches(cardNumber, pattern) {
+export default function matches(cardNumber, pattern) {
   if (Array.isArray(pattern)) {
     return matchesRange(cardNumber, pattern[0], pattern[1]);
   }
 
   return matchesPattern(cardNumber, pattern);
 }
-
-module.exports = matches;
