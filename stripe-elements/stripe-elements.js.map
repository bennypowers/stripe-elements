{
  "version": 3,
  "sources": ["src/stripe-elements.ts", "src/StripeBase.ts", "src/breadcrumb-controller.ts", "node_modules/@stripe/stripe-js/dist/pure.esm.js", "src/shared.css", "src/stripe-elements.css"],
  "sourcesContent": ["import type * as Stripe from '@stripe/stripe-js';\nimport { property, customElement } from 'lit/decorators.js';\n\nimport { bound } from './lib/bound.js';\n\nimport { StripeBase, StripePaymentResponse } from './StripeBase.js';\nimport { dash } from './lib/strings.js';\nimport { stripeMethod } from './lib/stripe-method-decorator.js';\nimport { readonly } from './lib/read-only.js';\nimport { notify } from './lib/notify.js';\n\nimport sharedStyles from './shared.css';\nimport style from './stripe-elements.css';\n\ninterface StripeStyleInit {\n   base?: Stripe.StripeElementStyle;\n   complete?: Stripe.StripeElementStyle;\n   empty?: Stripe.StripeElementStyle;\n   invalid?: Stripe.StripeElementStyle;\n}\n\ntype IconStyle = Stripe.StripeCardElementOptions['iconStyle'];\ntype CardBrand = Stripe.StripeCardElementChangeEvent['brand'];\ntype StripeFormValues = Stripe.StripeCardElementOptions['value'];\n\nconst ALLOWED_STYLES = [\n  'color',\n  'fontFamily',\n  'fontSize',\n  'fontStyle',\n  'fontSmoothing',\n  'fontVariant',\n  'iconColor',\n  'lineHeight',\n  'letterSpacing',\n  'textDecoration',\n  'textShadow',\n  'textTransform',\n];\n\nconst SUB_STYLES = [\n  ':hover',\n  ':focus',\n  '::placeholder',\n  '::selection',\n  ':-webkit-autofill',\n  // available for all Elements except the paymentRequestButton Element.\n  ':disabled',\n];\n\n/**\n * [Stripe.js v3 Card Elements](https://stripe.com/docs/elements), but it's a Web Component!\n * Supports Shadow DOM.\n *\n * \uD83D\uDC68\u200D\uD83C\uDFA8 [Live Demo](https://bennypowers.dev/stripe-elements/?path=/docs/stripe-elements--enter-a-stripe-publishable-key) \uD83D\uDC40\n *\n * ### \uD83E\uDDD9\u200D\u2642\uFE0F Usage\n * If you prebuilt with Snowpack, load the module from your `web_modules` directory\n *\n * ```html\n * <script type=\"module\" src=\"/web_modules/@power-elements/stripe-elements/stripe-elements.js\"></script>\n * ```\n *\n * Alternatively, load the module from the unpkg CDN\n * ```html\n * <script type=\"module\" src=\"https://unpkg.com/@power-elements/stripe-elements/stripe-elements.js?module\"></script>\n * ```\n *\n * Then you can add the element to your page.\n *\n * ```html\n * <stripe-elements id=\"stripe\"\n *     action=\"/payment\"\n *     publishable-key=\"pk_test_XXXXXXXXXXXXXXXXXXXXXXXX\"\n * ></stripe-elements>\n * ```\n *\n * See the demos for more comprehensive examples.\n *   - Using `<stripe-elements>` with [plain HTML and JavaScript](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-html--stripe-elements).\n *   - Using `<stripe-elements>` in a [LitElement](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-litelement--stripe-elements).\n *   - Using `<stripe-elements>` in a [Vue Component](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-vue--stripe-elements).\n *   - Using `<stripe-elements>` in an [Angular component](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-angular--stripe-elements).\n *   - Using `<stripe-elements>` in a [React component](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-react--stripe-elements).\n *   - Using `<stripe-elements>` in a [Preact component](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-preact--stripe-elements).\n *\n * ## Styling\n *\n * Stripe v3's 'Stripe Elements' are not custom elements, but rather forms\n * hosted by stripe and injected into your page via an iFrame. When we refer to the\n * 'Stripe Element' in this document, we are referring to the hosted Stripe form,\n * not the `<stripe-element>` custom element. But when I mention the 'element', I mean the custom element.\n *\n * When you apply CSS to the custom properties available, they're parsed and sent to Stripe, who should apply them to the Stripe Element they return in the iFrame.\n *\n * - `base` styles are inherited by all other variants.\n * - `complete` styles are applied when the Stripe Element has valid input.\n * - `empty` styles are applied when the Stripe Element has no user input.\n * - `invalid` styles are applied when the Stripe Element has invalid input.\n *\n * There are 11 properties for each state that you can set which will be read into the Stripe Element iFrame:\n *\n * - `color`\n * - `font-family`\n * - `font-size`\n * - `font-smoothing`\n * - `font-variant`\n * - `icon-color`\n * - `line-height`\n * - `letter-spacing`\n * - `text-decoration`\n * - `text-shadow`\n * - `text-transform`\n *\n * @cssprop [--stripe-elements-border-radius=`4px`] - border radius of the element container\n * @cssprop [--stripe-elements-border=`1px solid transparent`] - border property of the element container\n * @cssprop [--stripe-elements-box-shadow=`0 1px 3px 0 #e6ebf1`] - box shadow for the element container\n * @cssprop [--stripe-elements-transition=`box-shadow 150ms ease`] - transition property for the element container\n *\n * @cssprop [--stripe-elements-base-color] - `color` property for the element in its base state\n * @cssprop [--stripe-elements-base-font-family] - `font-family` property for the element in its base state\n * @cssprop [--stripe-elements-base-font-size] - `font-size` property for the element in its base state\n * @cssprop [--stripe-elements-base-font-smoothing] - `font-smoothing` property for the element in its base state\n * @cssprop [--stripe-elements-base-font-variant] - `font-variant` property for the element in its base state\n * @cssprop [--stripe-elements-base-icon-color] - `icon-color` property for the element in its base state\n * @cssprop [--stripe-elements-base-line-height] - `line-height` property for the element in its base state\n * @cssprop [--stripe-elements-base-letter-spacing] - `letter-spacing` property for the element in its base state\n * @cssprop [--stripe-elements-base-text-decoration] - `text-decoration` property for the element in its base state\n * @cssprop [--stripe-elements-base-text-shadow] - `text-shadow` property for the element in its base state\n * @cssprop [--stripe-elements-base-text-transform] - `text-transform` property for the element in its base state\n *\n * @cssprop [--stripe-elements-complete-color] - `color` property for the element in its complete state\n * @cssprop [--stripe-elements-complete-font-family] - `font-family` property for the element in its complete state\n * @cssprop [--stripe-elements-complete-font-size] - `font-size` property for the element in its complete state\n * @cssprop [--stripe-elements-complete-font-smoothing] - `font-smoothing` property for the element in its complete state\n * @cssprop [--stripe-elements-complete-font-variant] - `font-variant` property for the element in its complete state\n * @cssprop [--stripe-elements-complete-icon-color] - `icon-color` property for the element in its complete state\n * @cssprop [--stripe-elements-complete-line-height] - `line-height` property for the element in its complete state\n * @cssprop [--stripe-elements-complete-letter-spacing] - `letter-spacing` property for the element in its complete state\n * @cssprop [--stripe-elements-complete-text-decoration] - `text-decoration` property for the element in its complete state\n * @cssprop [--stripe-elements-complete-text-shadow] - `text-shadow` property for the element in its complete state\n * @cssprop [--stripe-elements-complete-text-transform] - `text-transform` property for the element in its complete state\n *\n * @cssprop [--stripe-elements-empty-color] - `color` property for the element in its empty state\n * @cssprop [--stripe-elements-empty-font-family] - `font-family` property for the element in its empty state\n * @cssprop [--stripe-elements-empty-font-size] - `font-size` property for the element in its empty state\n * @cssprop [--stripe-elements-empty-font-smoothing] - `font-smoothing` property for the element in its empty state\n * @cssprop [--stripe-elements-empty-font-variant] - `font-variant` property for the element in its empty state\n * @cssprop [--stripe-elements-empty-icon-color] - `icon-color` property for the element in its empty state\n * @cssprop [--stripe-elements-empty-line-height] - `line-height` property for the element in its empty state\n * @cssprop [--stripe-elements-empty-letter-spacing] - `letter-spacing` property for the element in its empty state\n * @cssprop [--stripe-elements-empty-text-decoration] - `text-decoration` property for the element in its empty state\n * @cssprop [--stripe-elements-empty-text-shadow] - `text-shadow` property for the element in its empty state\n * @cssprop [--stripe-elements-empty-text-transform] - `text-transform` property for the element in its empty state\n *\n * @cssprop [--stripe-elements-invalid-color] - `color` property for the element in its invalid state\n * @cssprop [--stripe-elements-invalid-font-family] - `font-family` property for the element in its invalid state\n * @cssprop [--stripe-elements-invalid-font-size] - `font-size` property for the element in its invalid state\n * @cssprop [--stripe-elements-invalid-font-smoothing] - `font-smoothing` property for the element in its invalid state\n * @cssprop [--stripe-elements-invalid-font-variant] - `font-variant` property for the element in its invalid state\n * @cssprop [--stripe-elements-invalid-icon-color] - `icon-color` property for the element in its invalid state\n * @cssprop [--stripe-elements-invalid-line-height] - `line-height` property for the element in its invalid state\n * @cssprop [--stripe-elements-invalid-letter-spacing] - `letter-spacing` property for the element in its invalid state\n * @cssprop [--stripe-elements-invalid-text-decoration] - `text-decoration` property for the element in its invalid state\n * @cssprop [--stripe-elements-invalid-text-shadow] - `text-shadow` property for the element in its invalid state\n * @cssprop [--stripe-elements-invalid-text-transform] - `text-transform` property for the element in its invalid state\n *\n * @element stripe-elements\n * @extends StripeBase\n *\n * @fires 'change' - Stripe Element change event\n */\n@customElement('stripe-elements')\nexport class StripeElements extends StripeBase {\n  static readonly is = 'stripe-elements';\n\n  static readonly elementType = 'card';\n\n  static readonly styles = [\n    sharedStyles,\n    style,\n  ];\n\n  declare element: Stripe.StripeCardElement;\n\n  /* PUBLIC FIELDS */\n\n  /**\n   * Whether to hide icons in the Stripe form.\n   */\n  @property({ type: Boolean, attribute: 'hide-icon' }) hideIcon = false;\n\n  /**\n   * Whether or not to hide the postal code field.\n   * Useful when you gather shipping info elsewhere.\n   */\n  @property({ type: Boolean, attribute: 'hide-postal-code' }) hidePostalCode = false;\n\n  /**\n   * Stripe icon style.\n   */\n  @property({ type: String, attribute: 'icon-style' }) iconStyle: IconStyle = 'default';\n\n  /**\n   * Prefilled values for form.\n   * @example { postalCode: '90210' }\n   */\n  @property({ type: Object }) value: StripeFormValues = {};\n\n  /* READ ONLY PROPERTIES */\n\n  /**\n   * The card brand detected by Stripe\n   */\n  @notify\n  @readonly\n  @property({ type: String })\n  readonly brand: CardBrand | null = null;\n\n  /**\n   * Whether the form is complete.\n   */\n  @notify\n  @readonly\n  @property({ type: Boolean, reflect: true })\n  readonly complete: boolean = false;\n\n  /**\n   * If the form is empty.\n   */\n  @notify\n  @readonly\n  @property({ type: Boolean, reflect: true })\n  readonly empty: boolean = true;\n\n  /**\n   * Whether the form is invalid.\n   */\n  @notify\n  @readonly\n  @property({ type: Boolean, reflect: true })\n  readonly invalid: boolean = false;\n\n  /* PUBLIC API */\n\n  /**\n   * Submit payment information to generate a paymentMethod\n   */\n  @stripeMethod public async createPaymentMethod(\n    paymentMethodData: Stripe.CreatePaymentMethodData = this.getPaymentMethodData()\n  ): Promise<Stripe.PaymentMethodResult> {\n    return this.stripe!.createPaymentMethod(paymentMethodData);\n  }\n\n  /**\n   * Submit payment information to generate a source\n   */\n  @stripeMethod public async createSource(\n    sourceData: Stripe.CreateSourceData = this.sourceData!\n  ): Promise<Stripe.SourceResult> {\n    return this.stripe!.createSource(this.element, sourceData);\n  }\n\n  /**\n   * Submit payment information to generate a token\n   */\n  @stripeMethod public async createToken(\n    tokenData = this.tokenData\n  ): Promise<Stripe.TokenResult> {\n    return this.stripe!.createToken(this.element, tokenData);\n  }\n\n  /**\n   * Checks for potential validity. A potentially valid form is one that is not empty, not complete and has no error. A validated form also counts as potentially valid.\n   */\n  public isPotentiallyValid(): boolean {\n    return (!this.complete && !this.empty && !this.error) || this.validate();\n  }\n\n  /**\n   * Resets the Stripe card.\n   */\n  public reset(): void {\n    super.reset();\n    /* istanbul ignore next */\n    this.element?.clear();\n  }\n\n  /**\n   * Generates a payment representation of the type specified by `generate`.\n   */\n  public async submit(): Promise<StripePaymentResponse> {\n    switch (this.generate) {\n      case 'payment-method': return this.createPaymentMethod();\n      case 'source': return this.createSource();\n      case 'token': return this.createToken();\n      default: {\n        const error = this.createError(`cannot generate ${this.generate}`);\n        readonly.set<StripeElements>(this, { error });\n        await this.updateComplete;\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Checks if the Stripe form is valid.\n   */\n  public validate(): boolean {\n    const { complete, empty, error } = this;\n    const isValid = !error && complete && !empty;\n    if (empty && !error)\n      readonly.set<StripeElements>(this, { error: this.createError('Your card number is empty.') });\n    return isValid;\n  }\n\n  public updateStyle() {\n    this.element?.update({\n      style: this.getStripeElementsStyles(),\n    });\n  }\n\n  /* PRIVATE METHODS */\n\n  /**\n   * Generates PaymentMethodData from the element.\n   */\n  private getPaymentMethodData(): Stripe.CreatePaymentMethodData {\n    const type = 'card';\n    const { billingDetails, paymentMethodData } = this;\n    return ({\n      billing_details: billingDetails,\n      ...paymentMethodData,\n      type,\n      card: this.element as Stripe.StripeCardElement,\n    });\n  }\n\n  /**\n   * Returns a Stripe-friendly style object computed from CSS custom properties\n   */\n  private getStripeElementsStyles(): Stripe.StripeElementStyle {\n    const getStyle = (prop: string): string|undefined =>\n      this.getCSSCustomPropertyValue(prop) || undefined;\n\n    const STATES = ['base', 'complete', 'empty', 'invalid'];\n    const subReducer = (state: string) => (acc: StripeStyleInit, sub: string) => {\n      if (state.includes('-')) return acc;\n      const subProp = sub.split(':').pop();\n      return {\n        ...acc,\n        [sub]: ALLOWED_STYLES.reduce(styleReducer(`${state}-${subProp}`), {}),\n      };\n    };\n\n    const styleReducer = (state: string) => (init: StripeStyleInit, p: string): StripeStyleInit => {\n      const prop = `--stripe-elements-${state}-${dash(p)}`;\n      return ({\n        ...init,\n        [p]: getStyle(prop),\n        ...SUB_STYLES.reduce(subReducer(state), {}),\n      });\n    };\n\n    return STATES.reduce((acc, state) => ({\n      ...acc,\n      [state]: ALLOWED_STYLES.reduce(styleReducer(state), {}),\n    }), {});\n  }\n\n  protected async initElement(): Promise<void> {\n    if (!this.stripe) return;\n    const { hidePostalCode, hideIcon, iconStyle, value } = this;\n    const style = this.getStripeElementsStyles();\n\n    await this.updateComplete;\n\n    const element = this.createElement({\n      hideIcon,\n      hidePostalCode,\n      iconStyle,\n      style,\n      value,\n    });\n\n    element.on('change', this.onChange);\n    readonly.set<StripeElements>(this, { element });\n    await this.updateComplete;\n  }\n\n  private createElement(options: Stripe.StripeCardElementOptions) {\n    const element = this.elements!.create('card', options);\n    return element;\n  }\n\n  /**\n   * Updates the element's state.\n   */\n  @bound private async onChange(event: Stripe.StripeCardElementChangeEvent): Promise<void> {\n    const { brand, complete, empty, error = null } = event;\n    const invalid = !(error || (!empty && !complete));\n    readonly.set<StripeElements>(this, { brand, complete, empty, error, invalid });\n    await this.updateComplete;\n    this.fire('change', event);\n  }\n}\n", "import type { TemplateResult, PropertyValues, ComplexAttributeConverter } from 'lit';\nimport type * as Stripe from '@stripe/stripe-js';\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\n\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport { bound } from './lib/bound.js';\n\nimport { dash } from './lib/strings.js';\nimport { isRepresentation } from './lib/predicates.js';\nimport { throwBadResponse } from './lib/fetch.js';\nimport { BreadcrumbController } from './breadcrumb-controller.js';\nimport { readonly } from './lib/read-only.js';\nimport { notify } from './lib/notify.js';\nimport { loadStripe } from '@stripe/stripe-js/pure.js';\nimport { StripeElementLocale } from '@stripe/stripe-js';\n\nexport const enum SlotName {\n  'stripe-elements' = 'stripe-elements-slot',\n  'stripe-payment-request' = 'stripe-payment-request-slot',\n}\n\nexport type PaymentRepresentation = 'payment-method'|'source'|'token'\nexport type StripePaymentResponse =\n  | Stripe.PaymentIntentResult\n  | Stripe.PaymentMethodResult\n  | Stripe.SetupIntentResult\n  | Stripe.TokenResult\n  | Stripe.SourceResult\n\ntype StripeElementType = Stripe.StripeCardElement | Stripe.StripePaymentRequestButtonElement;\ntype AmbiguousError = Error|Stripe.StripeError|StripeElementsError;\n\ndeclare global {\n  interface Node {\n    getRootNode(options?: GetRootNodeOptions): Node|ShadowRoot;\n  }\n}\n\nclass StripeElementsError extends Error {\n  originalMessage: string;\n\n  constructor(tag: 'stripe-elements'|'stripe-payment-request', message: string) {\n    super(`<${tag}>: ${message}`);\n    this.originalMessage = message;\n  }\n}\n\nfunction isStripeElementsError(error: AmbiguousError | null): error is StripeElementsError {\n  return !!error && error instanceof StripeElementsError;\n}\n\nconst errorConverter: ComplexAttributeConverter = {\n  toAttribute: (error: AmbiguousError) =>\n        !error ? null\n      : isStripeElementsError(error) ? error.originalMessage\n      : error.message || '',\n};\n\n/**\n * @fires 'error' - The validation error, or the error returned from stripe.com\n * @fires 'payment-method' - The PaymentMethod received from stripe.com\n * @fires 'source' - The Source received from stripe.com\n * @fires 'token' - The Token received from stripe.com\n * @fires 'success' - When a payment succeeds\n * @fires 'ready' - Stripe has been initialized and mounted\n *\n * @csspart 'error' - container for the error message\n * @csspart 'stripe' - container for the stripe element\n */\nexport class StripeBase extends LitElement {\n  static is: 'stripe-elements'|'stripe-payment-request';\n\n  /* PAYMENT CONFIGURATION */\n\n  /**\n   * billing_details object sent to create the payment representation. (optional)\n   */\n  billingDetails?: Stripe.CreatePaymentMethodData['billing_details'];\n\n  /**\n   * Data passed to stripe.createPaymentMethod. (optional)\n   */\n  paymentMethodData?: Stripe.CreatePaymentMethodData;\n\n  /**\n   * Data passed to stripe.createSource. (optional)\n   */\n  sourceData?: Stripe.CreateSourceData;\n\n  /**\n   * Data passed to stripe.createToken. (optional)\n   */\n  tokenData?: Stripe.CreateTokenCardData;\n\n  /* SETTINGS */\n\n  /**\n   * If set, when Stripe returns the payment info (PaymentMethod, Source, or Token),\n   * the element will POST JSON data to this URL with an object containing\n   * a key equal to the value of the `generate` property.\n   * @example\n   * ```html\n   * <stripe-elements\n   *   publishable-key=\"pk_test_XXXXXXXXXXXXX\"\n   *   generate=\"token\"\n   *   action=\"/payment\"\n   * ></stripe-elements>\n   * ```\n   * will POST to `/payment` with JSON body `{ \"token\": { ... } }`\n   * ```js\n   * stripeElements.submit();\n   * ```\n   */\n  @property({ type: String }) action?: string;\n\n  /**\n   * The `client_secret` part of a Stripe `PaymentIntent`\n   */\n  @property({ type: String, attribute: 'client-secret' }) clientSecret?: string;\n\n  /**\n   * Type of payment representation to generate.\n   */\n  @property({ type: String }) generate: PaymentRepresentation = 'source';\n\n  /**\n   * Stripe Publishable Key. EG. `pk_test_XXXXXXXXXXXXXXXXXXXXXXXX`\n   */\n  @notify\n  @property({ type: String, attribute: 'publishable-key', reflect: true }) publishableKey?: string;\n\n  /** Whether to display the error message */\n  @property({ type: Boolean, attribute: 'show-error', reflect: true }) showError = false;\n\n  /** Stripe account to use (connect) */\n  @property({ type: String, attribute: 'stripe-account' }) stripeAccount?: string;\n\n  /** Stripe locale to use */\n  @property({ type: String, attribute: 'locale' }) locale: StripeElementLocale = 'auto';\n\n  /* READ-ONLY FIELDS */\n\n  /* PAYMENT REPRESENTATIONS */\n\n  /**\n   * Stripe PaymentMethod\n   */\n  @readonly\n  @notify\n  @property({ type: Object, attribute: 'payment-method' })\n  readonly paymentMethod: Stripe.PaymentMethod | null = null;\n\n  /**\n   * Stripe Source\n   */\n  @readonly\n  @notify\n  @property({ type: Object })\n  readonly source: Stripe.Source | null = null;\n\n  /**\n   * Stripe Token\n   */\n  @readonly\n  @notify\n  @property({ type: Object })\n  readonly token: Stripe.Token | null = null;\n\n  /**\n   * Stripe element instance\n   */\n  @readonly\n  @property({ type: Object })\n  readonly element: StripeElementType | null = null;\n\n  /**\n   * Stripe Elements instance\n   */\n  @readonly\n  @property({ type: Object })\n  readonly elements: Stripe.StripeElements | null = null;\n\n  /**\n   * Stripe or validation error\n   */\n  @readonly\n  @notify\n  @property({ type: Object, reflect: true, converter: errorConverter })\n  readonly error: AmbiguousError | null = null;\n\n  /**\n   * If the element is focused.\n   */\n  @readonly\n  @notify\n  @property({ type: Boolean, reflect: true })\n  readonly focused: boolean = false;\n\n  /**\n   * Whether the stripe element is ready to receive focus.\n   */\n  @readonly\n  @notify\n  @property({ type: Boolean, reflect: true })\n  readonly ready: boolean = false;\n\n  /**\n   * Stripe instance\n   */\n  @readonly\n  @property({ type: Object })\n  readonly stripe: Stripe.Stripe | null = null;\n\n  /**\n   * Stripe appearance theme\n   * @see https://stripe.com/docs/stripe-js/appearance-api#theme\n   */\n  @property() theme: 'stripe'|'night'|'flat'|'none' = 'none';\n\n  @property({ attribute: 'border-radius' }) borderRadius?: string;\n  @property({ attribute: 'color-background' }) colorBackground?: string;\n  @property({ attribute: 'color-danger' }) colorDanger?: string;\n  @property({ attribute: 'color-primary' }) colorPrimary?: string;\n  @property({ attribute: 'color-text' }) colorText?: string;\n  @property({ attribute: 'font-family' }) fontFamily?: string;\n  @property({ attribute: 'spacing-unit' }) spacingUnit?: string;\n\n  /* PRIVATE FIELDS */\n\n  private precomputedStyle = getComputedStyle(this);\n\n  private breadcrumb = new BreadcrumbController(this, {\n    slotName: `${(this.constructor as typeof StripeBase).is}-slot`,\n  });\n\n  get stripeMountId() { return this.breadcrumb.mountId; }\n  get stripeMount() { return this.breadcrumb.mount; }\n\n  /* LIFECYCLE */\n\n  /** @inheritdoc */\n  render(): TemplateResult {\n    const { error, showError } = this;\n    const { slotName } = this.breadcrumb;\n    const errorMessage = isStripeElementsError(error) ? error.originalMessage : error?.message;\n    return html`\n      <div id=\"stripe\" part=\"stripe\">\n        <slot id=\"stripe-slot\" name=\"${slotName}\"></slot>\n      </div>\n\n      <output id=\"error\"\n          for=\"stripe\"\n          part=\"error\"\n          ?hidden=\"${!showError}\">\n        ${ifDefined(errorMessage)}\n      </output>\n    `;\n  }\n\n  /** @inheritdoc */\n  protected updated(changed: PropertyValues): void {\n    /* istanbul ignore next */\n    super.updated?.(changed);\n    if (changed.has('error')) this.errorChanged();\n    if (changed.has('publishableKey')) this.init();\n    [...changed.keys()].forEach(k => this.representationChanged(k));\n  }\n\n  /** @inheritdoc */\n  async disconnectedCallback(): Promise<void> {\n    super.disconnectedCallback();\n    /* istanbul ignore next */\n    await this.unmount?.();\n  }\n\n  /* PUBLIC API */\n\n  /**\n   * Resets and clears the stripe element.\n   */\n  public reset(): void {\n    /* istanbul ignore next */\n    this.element?.clear?.();\n    this.resetRepresentations();\n    readonly.set<StripeBase>(this, { error: null });\n  }\n\n  /** Blurs the element. */\n  public blur(): void {\n    /* istanbul ignore next */\n    this.element?.blur();\n  }\n\n  /** Focuses the element. */\n  public focus(): void {\n    /* istanbul ignore next */\n    this.element?.focus();\n  }\n\n  /* PRIVATE API */\n\n  /**\n   * Creates a new StripeElementsError\n   */\n  protected createError(message: string): StripeElementsError {\n    return new StripeElementsError((this.constructor as typeof StripeBase).is, message);\n  }\n\n  /**\n   * Clears the Payment Representation and fires an error event\n   */\n  private errorChanged(): void {\n    this.resetRepresentations();\n    this.fireError(this.error);\n  }\n\n  /**\n   * Fires an event.\n   * @param type      event type\n   * @param detail    detail value\n   * @param [opts={}]\n   */\n  protected fire(type: string, detail?: unknown, opts?: EventInit): void {\n    this.dispatchEvent(new CustomEvent(type, { detail, ...opts }));\n  }\n\n  /**\n   * Fires an Error Event\n   */\n  private fireError(error: AmbiguousError | null): void {\n    this.dispatchEvent(new ErrorEvent('error', { error }));\n  }\n\n  /**\n   * Gets a CSS Custom Property value.\n   * @param   propertyName    CSS Custom Property\n   */\n  protected getCSSCustomPropertyValue(propertyName: string): string {\n    return this.precomputedStyle.getPropertyValue(propertyName);\n  }\n\n  /**\n   * Sets the token or error from the response.\n   * @param   response       Stripe Response\n   * @return\n   */\n  @bound protected async handleResponse(\n    response: StripePaymentResponse\n  ): Promise<StripePaymentResponse> {\n    const { error = null, paymentMethod = null, source = null, token = null } = { ...response };\n    readonly.set<StripeBase>(this, { error, paymentMethod, source, token });\n    await this.updateComplete;\n    if (error) throw error;\n    else return response;\n  }\n\n  /** @abstract */\n  /* istanbul ignore next */\n  protected initElement?(): void | Promise<void> { 'abstract'; }\n\n  /**\n   * Reinitializes Stripe and mounts the element.\n   */\n  private async init(): Promise<void> {\n    await this.unmount();\n    await this.initStripe();\n    await this.initElement!();\n    this.initElementListeners();\n    this.breadcrumb.init();\n    this.mount();\n  }\n\n  /**\n   * Adds `ready`, `focus`, and `blur` listeners to the Stripe Element\n   */\n  private initElementListeners(): void {\n    if (!this.element) return;\n    // @ts-expect-error: should still work\n    this.element.on('ready', this.onReady);\n    // @ts-expect-error: should still work\n    this.element.on('focus', this.onFocus);\n    // @ts-expect-error: should still work\n    this.element.on('blur', this.onBlur);\n  }\n\n  /**\n   * Initializes Stripe and elements.\n   */\n  private async initStripe(): Promise<void> {\n    const { publishableKey, stripeAccount, locale } = this;\n    if (!publishableKey)\n      readonly.set<StripeBase>(this, { elements: null, element: null, stripe: null });\n    else {\n      try {\n        const options = { stripeAccount, locale };\n        const stripe =\n            (window.Stripe) ? window.Stripe(publishableKey, options)\n          : await loadStripe(publishableKey, options);\n        const elements = stripe?.elements();\n        readonly.set<StripeBase>(this, { elements, error: null, stripe });\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn(e);\n        const error = this.createError('Stripe.js must be loaded first.');\n        readonly.set<StripeBase>(this, { elements: null, error, stripe: null });\n      } finally {\n        await this.updateComplete;\n      }\n    }\n  }\n\n  /**\n   * Mounts the Stripe Element\n   */\n  private mount(): void {\n    /* istanbul ignore next */\n    if (!this.breadcrumb.mount)\n      throw this.createError('Stripe Mount missing');\n    this.element?.mount(this.breadcrumb.mount as HTMLElement);\n  }\n\n  /**\n   * Unmounts and nullifies the card.\n   */\n  private async unmount(): Promise<void> {\n    this.element?.unmount?.();\n    readonly.set<StripeBase>(this, { element: null });\n    await this.updateComplete;\n  }\n\n  /**\n   * Updates element state when Stripe Element is blurred.\n   */\n  @bound private async onBlur(): Promise<void> {\n    readonly.set<StripeBase>(this, { focused: false });\n    await this.updateComplete;\n  }\n\n  @bound private async onFocus(): Promise<void> {\n    readonly.set<StripeBase>(this, { focused: true });\n    await this.updateComplete;\n  }\n\n  /**\n   * Sets the `ready` property when the stripe element is ready to receive focus.\n   */\n  @bound private async onReady(event: Stripe.StripeElementChangeEvent): Promise<void> {\n    readonly.set<StripeBase>(this, { ready: true });\n    await this.updateComplete;\n    this.fire('ready', event);\n  }\n\n  /**\n   * POSTs the payment info represenation to the endpoint at `/action`\n   */\n  private async postRepresentation(): Promise<void> {\n    const onError = (error: Error): void => readonly.set<StripeBase>(this, { error });\n    const onSuccess = (success: unknown): void => this.fire('success', success);\n    const token = this.token || undefined;\n    const source = this.source || undefined;\n    const paymentMethod = this.paymentMethod || undefined;\n    const body = JSON.stringify({ token, source, paymentMethod });\n    const headers = { 'Content-Type': 'application/json' };\n    const method = 'POST';\n    return fetch(this.action!, { body, headers, method })\n      .then(throwBadResponse)\n      .then(onSuccess)\n      .catch(onError);\n  }\n\n  /**\n   * Updates the state and fires events when the token, source, or payment method is updated.\n   */\n  private representationChanged(name: PropertyKey): void {\n    if (!isRepresentation(name as string))\n      return;\n    const value = this[name as keyof this];\n    /* istanbul ignore if */\n    if (!value)\n      return;\n    this.fire(`${dash(name as string)}`, value);\n    if (this.action)\n      this.postRepresentation();\n  }\n\n  /**\n   * Resets the Payment Representations\n   */\n  private resetRepresentations(): void {\n    readonly.set<StripeBase>(this, {\n      paymentMethod: null,\n      token: null,\n      source: null,\n    });\n  }\n}\n", "import type { ReactiveController, ReactiveControllerHost } from 'lit';\n\nexport interface BreadcrumbControllerOptions {\n  autoInitialize?: boolean;\n  mountPrefix?: string;\n  slotName?: string;\n}\n\ntype Host = Element|ShadowRoot|Document;\n\n/** Generates a random number */\nexport function getRandom(): string {\n  return (Date.now() + (Math.random() * 1000)).toString(36).substr(0, 8);\n}\n\nexport class BreadcrumbController implements ReactiveController {\n  private initialized = false;\n\n  /**\n   * Breadcrumbs back up to the document.\n   */\n  private shadowHosts: Host[] = [];\n\n  /**\n   * Mount point element ID. This element must be connected to the document.\n   */\n  public mountId: string;\n\n  public slotName: string;\n\n  /**\n   * Mount point element. This element must be connected to the document.\n   */\n  public get mount(): Element|null { return document.getElementById(this.mountId); }\n\n  constructor(\n    private host: ReactiveControllerHost & Element,\n    private options?: BreadcrumbControllerOptions\n  ) {\n    this.host.addController(this);\n    this.mountId = this.resetMountId();\n    this.slotName = this.options?.slotName ?? `breadcrumb-${getRandom()}`;\n  }\n\n  hostUpdated(): void {\n    if (!this.initialized && this.options?.autoInitialize !== false)\n      this.init();\n  }\n\n  hostDisconnected(): void {\n    this.destroyMountPoints();\n  }\n\n  private resetMountId() {\n    const prefix = this.options?.mountPrefix ?? this.host.localName;\n    return `${prefix}-mount-point-${getRandom()}`;\n  }\n\n  private createMountPoint(): HTMLElement {\n    const node = document.createElement('div');\n    node.id = this.mountId;\n    node.classList.add(`${this.host.tagName.toLowerCase()}-mount`);\n    return node;\n  }\n\n  private createSlot(slotName: string): HTMLSlotElement {\n    const node = document.createElement('slot');\n    node.slot = slotName;\n    node.name = slotName;\n    return node;\n  }\n\n  private appendTemplate(target: Node, node = this.createMountPoint()) {\n    target.appendChild(node);\n    return node;\n  }\n\n  /**\n   * Creates mount points for the slotted element\n   */\n  private initMountPoints(): void {\n    this.initShadowMountPoints();\n  }\n\n  /**\n   * Removes all mount points from the DOM\n   */\n  private destroyMountPoints(): void {\n    // eslint-disable-next-line easy-loops/easy-loops\n    for (const host of this.shadowHosts) {\n      for (const el of host.querySelectorAll(`[slot=\"${this.slotName}\"][name=\"${this.slotName}\"]`))\n        el.remove();\n    }\n    if (this.mount)\n      this.mount.remove();\n    this.mountId = this.resetMountId();\n  }\n\n  /**\n   * Prepares to mount Stripe Elements in light DOM.\n   */\n  private initShadowMountPoints(): void {\n    // trace each shadow boundary between us and the document\n    let host = this.host as Element;\n    this.shadowHosts = [this.host];\n    while (host = (host.getRootNode() as ShadowRoot).host) // eslint-disable-line easy-loops/easy-loops, no-cond-assign, prefer-destructuring\n      this.shadowHosts.push(host);\n\n    const { shadowHosts, slotName } = this;\n\n    // Prepare the shallowest breadcrumb slot at document level\n    const hosts = [...shadowHosts];\n    const root = hosts.pop();\n    if (!root!.querySelector(`[slot=\"${slotName}\"]`)) {\n      const div = document.createElement('div');\n      div.slot = slotName;\n      root!.appendChild(div);\n    }\n\n    const container = root!.querySelector(`[slot=\"${slotName}\"]`);\n\n    // Render the form to the document, so that the slotted content can mount\n    this.appendTemplate(container!);\n\n    // Append breadcrumb slots to each shadowroot in turn,\n    // from the document down to the <stripe-elements> instance.\n    hosts.forEach(host => this.appendTemplate(host, this.createSlot(slotName)));\n  }\n\n  public init() {\n    this.destroyMountPoints();\n    this.initMountPoints();\n    this.initialized = true;\n  }\n}\n", "function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar V3_URL = 'https://js.stripe.com/v3';\nvar V3_URL_REGEX = /^https:\\/\\/js\\.stripe\\.com\\/v3\\/?(\\?.*)?$/;\nvar EXISTING_SCRIPT_MESSAGE = 'loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used';\nvar findScript = function findScript() {\n  var scripts = document.querySelectorAll(\"script[src^=\\\"\".concat(V3_URL, \"\\\"]\"));\n\n  for (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i];\n\n    if (!V3_URL_REGEX.test(script.src)) {\n      continue;\n    }\n\n    return script;\n  }\n\n  return null;\n};\n\nvar injectScript = function injectScript(params) {\n  var queryString = params && !params.advancedFraudSignals ? '?advancedFraudSignals=false' : '';\n  var script = document.createElement('script');\n  script.src = \"\".concat(V3_URL).concat(queryString);\n  var headOrBody = document.head || document.body;\n\n  if (!headOrBody) {\n    throw new Error('Expected document.body not to be null. Stripe.js requires a <body> element.');\n  }\n\n  headOrBody.appendChild(script);\n  return script;\n};\n\nvar registerWrapper = function registerWrapper(stripe, startTime) {\n  if (!stripe || !stripe._registerWrapper) {\n    return;\n  }\n\n  stripe._registerWrapper({\n    name: 'stripe-js',\n    version: \"1.32.0\",\n    startTime: startTime\n  });\n};\n\nvar stripePromise = null;\nvar loadScript = function loadScript(params) {\n  // Ensure that we only attempt to load Stripe.js at most once\n  if (stripePromise !== null) {\n    return stripePromise;\n  }\n\n  stripePromise = new Promise(function (resolve, reject) {\n    if (typeof window === 'undefined') {\n      // Resolve to null when imported server side. This makes the module\n      // safe to import in an isomorphic code base.\n      resolve(null);\n      return;\n    }\n\n    if (window.Stripe && params) {\n      console.warn(EXISTING_SCRIPT_MESSAGE);\n    }\n\n    if (window.Stripe) {\n      resolve(window.Stripe);\n      return;\n    }\n\n    try {\n      var script = findScript();\n\n      if (script && params) {\n        console.warn(EXISTING_SCRIPT_MESSAGE);\n      } else if (!script) {\n        script = injectScript(params);\n      }\n\n      script.addEventListener('load', function () {\n        if (window.Stripe) {\n          resolve(window.Stripe);\n        } else {\n          reject(new Error('Stripe.js not available'));\n        }\n      });\n      script.addEventListener('error', function () {\n        reject(new Error('Failed to load Stripe.js'));\n      });\n    } catch (error) {\n      reject(error);\n      return;\n    }\n  });\n  return stripePromise;\n};\nvar initStripe = function initStripe(maybeStripe, args, startTime) {\n  if (maybeStripe === null) {\n    return null;\n  }\n\n  var stripe = maybeStripe.apply(undefined, args);\n  registerWrapper(stripe, startTime);\n  return stripe;\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nvar validateLoadParams = function validateLoadParams(params) {\n  var errorMessage = \"invalid load parameters; expected object of shape\\n\\n    {advancedFraudSignals: boolean}\\n\\nbut received\\n\\n    \".concat(JSON.stringify(params), \"\\n\");\n\n  if (params === null || _typeof(params) !== 'object') {\n    throw new Error(errorMessage);\n  }\n\n  if (Object.keys(params).length === 1 && typeof params.advancedFraudSignals === 'boolean') {\n    return params;\n  }\n\n  throw new Error(errorMessage);\n};\n\nvar loadParams;\nvar loadStripeCalled = false;\nvar loadStripe = function loadStripe() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  loadStripeCalled = true;\n  var startTime = Date.now();\n  return loadScript(loadParams).then(function (maybeStripe) {\n    return initStripe(maybeStripe, args, startTime);\n  });\n};\n\nloadStripe.setLoadParameters = function (params) {\n  if (loadStripeCalled) {\n    throw new Error('You cannot change load parameters after calling loadStripe');\n  }\n\n  loadParams = validateLoadParams(params);\n};\n\nexport { loadStripe };\n", "import {css} from 'lit';\nexport const styles = css`[hidden] {\n  display: none !important;\n}\n\n:host:not([hidden]) {\n  display: block;\n  box-sizing: border-box;\n}\n\n#error {\n  font-family: sans-serif;\n  font-size: 14px;\n  padding-left: 42px;\n  padding-bottom: 10px;\n}\n`;\nexport default styles;\n", "import {css} from 'lit';\nexport const styles = css`:host {\n  min-width: var(--stripe-elements-width, 300px);\n  min-height: var(--stripe-elements-height, 50px);\n}\n\n#stripe {\n  box-sizing: border-box;\n  border-radius: var(--stripe-elements-border-radius, 4px);\n  border: var(--stripe-elements-border, 1px solid transparent);\n  box-shadow: var(--stripe-elements-box-shadow, 0 1px 3px 0 #e6ebf1);\n  transition: var(--stripe-elements-transition, box-shadow 150ms ease);\n  min-width: var(--stripe-elements-width, 300px);\n  padding: var(--stripe-elements-element-padding, 8px 12px);\n  background: var(--stripe-elements-element-background, white);\n}\n\n:host([focused]) #stripe {\n  box-shadow: 0 1px 3px 0 #cfd7df;\n}\n\n:host([error]) #stripe {\n  border-color: #fa755a;\n}\n`;\nexport default styles;\n"],
  "mappings": ";;;;;;;;;;;;;;AACA;AAEA;;;ACDA;AACA;AAEA;AAEA;AAEA;AACA;AACA;;;ACAO,qBAA6B;AAClC,SAAQ,MAAK,IAAI,IAAK,KAAK,OAAO,IAAI,KAAO,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC;AACvE;AAEO,IAAM,uBAAN,MAAyD;AAAA,EAoB9D,YACU,MACA,SACR;AAFQ;AACA;AArBV,SAAQ,cAAc;AAKtB,SAAQ,cAAsB,CAAC;AAkB7B,SAAK,KAAK,cAAc,IAAI;AAC5B,SAAK,UAAU,KAAK,aAAa;AACjC,SAAK,WAAW,KAAK,SAAS,YAAY,cAAc,UAAU;AAAA,EACpE;AAAA,EATA,IAAW,QAAsB;AAAE,WAAO,SAAS,eAAe,KAAK,OAAO;AAAA,EAAG;AAAA,EAWjF,cAAoB;AAClB,QAAI,CAAC,KAAK,eAAe,KAAK,SAAS,mBAAmB;AACxD,WAAK,KAAK;AAAA,EACd;AAAA,EAEA,mBAAyB;AACvB,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EAEA,AAAQ,eAAe;AACrB,UAAM,SAAS,KAAK,SAAS,eAAe,KAAK,KAAK;AACtD,WAAO,GAAG,sBAAsB,UAAU;AAAA,EAC5C;AAAA,EAEA,AAAQ,mBAAgC;AACtC,UAAM,OAAO,SAAS,cAAc,KAAK;AACzC,SAAK,KAAK,KAAK;AACf,SAAK,UAAU,IAAI,GAAG,KAAK,KAAK,QAAQ,YAAY,SAAS;AAC7D,WAAO;AAAA,EACT;AAAA,EAEA,AAAQ,WAAW,UAAmC;AACpD,UAAM,OAAO,SAAS,cAAc,MAAM;AAC1C,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,WAAO;AAAA,EACT;AAAA,EAEA,AAAQ,eAAe,QAAc,OAAO,KAAK,iBAAiB,GAAG;AACnE,WAAO,YAAY,IAAI;AACvB,WAAO;AAAA,EACT;AAAA,EAKA,AAAQ,kBAAwB;AAC9B,SAAK,sBAAsB;AAAA,EAC7B;AAAA,EAKA,AAAQ,qBAA2B;AAEjC,eAAW,QAAQ,KAAK,aAAa;AACnC,iBAAW,MAAM,KAAK,iBAAiB,UAAU,KAAK,oBAAoB,KAAK,YAAY;AACzF,WAAG,OAAO;AAAA,IACd;AACA,QAAI,KAAK;AACP,WAAK,MAAM,OAAO;AACpB,SAAK,UAAU,KAAK,aAAa;AAAA,EACnC;AAAA,EAKA,AAAQ,wBAA8B;AAEpC,QAAI,OAAO,KAAK;AAChB,SAAK,cAAc,CAAC,KAAK,IAAI;AAC7B,WAAO,OAAQ,KAAK,YAAY,EAAiB;AAC/C,WAAK,YAAY,KAAK,IAAI;AAE5B,UAAM,EAAE,aAAa,aAAa;AAGlC,UAAM,QAAQ,CAAC,GAAG,WAAW;AAC7B,UAAM,OAAO,MAAM,IAAI;AACvB,QAAI,CAAC,KAAM,cAAc,UAAU,YAAY,GAAG;AAChD,YAAM,MAAM,SAAS,cAAc,KAAK;AACxC,UAAI,OAAO;AACX,WAAM,YAAY,GAAG;AAAA,IACvB;AAEA,UAAM,YAAY,KAAM,cAAc,UAAU,YAAY;AAG5D,SAAK,eAAe,SAAU;AAI9B,UAAM,QAAQ,WAAQ,KAAK,eAAe,OAAM,KAAK,WAAW,QAAQ,CAAC,CAAC;AAAA,EAC5E;AAAA,EAEA,AAAO,OAAO;AACZ,SAAK,mBAAmB;AACxB,SAAK,gBAAgB;AACrB,SAAK,cAAc;AAAA,EACrB;AACF;;;ADzHA;AACA;;;AEdA,iBAAiB,KAAK;AACpB;AAEA,MAAI,OAAO,WAAW,cAAc,OAAO,OAAO,aAAa,UAAU;AACvE,cAAU,SAAU,MAAK;AACvB,aAAO,OAAO;AAAA,IAChB;AAAA,EACF,OAAO;AACL,cAAU,SAAU,MAAK;AACvB,aAAO,QAAO,OAAO,WAAW,cAAc,KAAI,gBAAgB,UAAU,SAAQ,OAAO,YAAY,WAAW,OAAO;AAAA,IAC3H;AAAA,EACF;AAEA,SAAO,QAAQ,GAAG;AACpB;AAEA,IAAI,SAAS;AACb,IAAI,eAAe;AACnB,IAAI,0BAA0B;AAC9B,IAAI,aAAa,uBAAsB;AACrC,MAAI,UAAU,SAAS,iBAAiB,gBAAiB,OAAO,QAAQ,IAAK,CAAC;AAE9E,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,QAAI,SAAS,QAAQ;AAErB,QAAI,CAAC,aAAa,KAAK,OAAO,GAAG,GAAG;AAClC;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAEA,IAAI,eAAe,uBAAsB,QAAQ;AAC/C,MAAI,cAAc,UAAU,CAAC,OAAO,uBAAuB,gCAAgC;AAC3F,MAAI,SAAS,SAAS,cAAc,QAAQ;AAC5C,SAAO,MAAM,GAAG,OAAO,MAAM,EAAE,OAAO,WAAW;AACjD,MAAI,aAAa,SAAS,QAAQ,SAAS;AAE3C,MAAI,CAAC,YAAY;AACf,UAAM,IAAI,MAAM,6EAA6E;AAAA,EAC/F;AAEA,aAAW,YAAY,MAAM;AAC7B,SAAO;AACT;AAEA,IAAI,kBAAkB,0BAAyB,QAAQ,WAAW;AAChE,MAAI,CAAC,UAAU,CAAC,OAAO,kBAAkB;AACvC;AAAA,EACF;AAEA,SAAO,iBAAiB;AAAA,IACtB,MAAM;AAAA,IACN,SAAS;AAAA,IACT;AAAA,EACF,CAAC;AACH;AAEA,IAAI,gBAAgB;AACpB,IAAI,aAAa,qBAAoB,QAAQ;AAE3C,MAAI,kBAAkB,MAAM;AAC1B,WAAO;AAAA,EACT;AAEA,kBAAgB,IAAI,QAAQ,SAAU,SAAS,QAAQ;AACrD,QAAI,OAAO,WAAW,aAAa;AAGjC,cAAQ,IAAI;AACZ;AAAA,IACF;AAEA,QAAI,OAAO,UAAU,QAAQ;AAC3B,cAAQ,KAAK,uBAAuB;AAAA,IACtC;AAEA,QAAI,OAAO,QAAQ;AACjB,cAAQ,OAAO,MAAM;AACrB;AAAA,IACF;AAEA,QAAI;AACF,UAAI,SAAS,WAAW;AAExB,UAAI,UAAU,QAAQ;AACpB,gBAAQ,KAAK,uBAAuB;AAAA,MACtC,WAAW,CAAC,QAAQ;AAClB,iBAAS,aAAa,MAAM;AAAA,MAC9B;AAEA,aAAO,iBAAiB,QAAQ,WAAY;AAC1C,YAAI,OAAO,QAAQ;AACjB,kBAAQ,OAAO,MAAM;AAAA,QACvB,OAAO;AACL,iBAAO,IAAI,MAAM,yBAAyB,CAAC;AAAA,QAC7C;AAAA,MACF,CAAC;AACD,aAAO,iBAAiB,SAAS,WAAY;AAC3C,eAAO,IAAI,MAAM,0BAA0B,CAAC;AAAA,MAC9C,CAAC;AAAA,IACH,SAAS,OAAP;AACA,aAAO,KAAK;AACZ;AAAA,IACF;AAAA,EACF,CAAC;AACD,SAAO;AACT;AACA,IAAI,aAAa,qBAAoB,aAAa,MAAM,WAAW;AACjE,MAAI,gBAAgB,MAAM;AACxB,WAAO;AAAA,EACT;AAEA,MAAI,SAAS,YAAY,MAAM,QAAW,IAAI;AAC9C,kBAAgB,QAAQ,SAAS;AACjC,SAAO;AACT;AAEA,IAAI,qBAAqB,6BAA4B,QAAQ;AAC3D,MAAI,eAAe,mHAAmH,OAAO,KAAK,UAAU,MAAM,GAAG,IAAI;AAEzK,MAAI,WAAW,QAAQ,QAAQ,MAAM,MAAM,UAAU;AACnD,UAAM,IAAI,MAAM,YAAY;AAAA,EAC9B;AAEA,MAAI,OAAO,KAAK,MAAM,EAAE,WAAW,KAAK,OAAO,OAAO,yBAAyB,WAAW;AACxF,WAAO;AAAA,EACT;AAEA,QAAM,IAAI,MAAM,YAAY;AAC9B;AAEA,IAAI;AACJ,IAAI,mBAAmB;AACvB,IAAI,aAAa,uBAAsB;AACrC,WAAS,OAAO,UAAU,QAAQ,OAAO,IAAI,MAAM,IAAI,GAAG,OAAO,GAAG,OAAO,MAAM,QAAQ;AACvF,SAAK,QAAQ,UAAU;AAAA,EACzB;AAEA,qBAAmB;AACnB,MAAI,YAAY,KAAK,IAAI;AACzB,SAAO,WAAW,UAAU,EAAE,KAAK,SAAU,aAAa;AACxD,WAAO,WAAW,aAAa,MAAM,SAAS;AAAA,EAChD,CAAC;AACH;AAEA,WAAW,oBAAoB,SAAU,QAAQ;AAC/C,MAAI,kBAAkB;AACpB,UAAM,IAAI,MAAM,4DAA4D;AAAA,EAC9E;AAEA,eAAa,mBAAmB,MAAM;AACxC;;;AFnHA,IAAM,sBAAN,cAAkC,MAAM;AAAA,EAGtC,YAAY,KAAiD,SAAiB;AAC5E,UAAM,IAAI,SAAS,SAAS;AAC5B,SAAK,kBAAkB;AAAA,EACzB;AACF;AAEA,+BAA+B,OAA4D;AACzF,SAAO,CAAC,CAAC,SAAS,iBAAiB;AACrC;AAEA,IAAM,iBAA4C;AAAA,EAChD,aAAa,CAAC,UACR,CAAC,QAAQ,OACT,sBAAsB,KAAK,IAAI,MAAM,kBACrC,MAAM,WAAW;AACzB;AAaO,IAAM,aAAN,cAAyB,WAAW;AAAA,EAApC;AAAA;AAsDuB,oBAAkC;AASO,qBAAY;AAMhC,kBAA8B;AAY/E,SAAS,gBAA6C;AAQtD,SAAS,SAA+B;AAQxC,SAAS,QAA6B;AAOtC,SAAS,UAAoC;AAO7C,SAAS,WAAyC;AAQlD,SAAS,QAA+B;AAQxC,SAAS,UAAmB;AAQ5B,SAAS,QAAiB;AAO1B,SAAS,SAA+B;AAM5B,iBAAwC;AAYpD,SAAQ,mBAAmB,iBAAiB,IAAI;AAEhD,SAAQ,aAAa,IAAI,qBAAqB,MAAM;AAAA,MAClD,UAAU,GAAI,KAAK,YAAkC;AAAA,IACvD,CAAC;AAAA;AAAA,EAED,IAAI,gBAAgB;AAAE,WAAO,KAAK,WAAW;AAAA,EAAS;AAAA,EACtD,IAAI,cAAc;AAAE,WAAO,KAAK,WAAW;AAAA,EAAO;AAAA,EAKlD,SAAyB;AACvB,UAAM,EAAE,OAAO,cAAc;AAC7B,UAAM,EAAE,aAAa,KAAK;AAC1B,UAAM,eAAe,sBAAsB,KAAK,IAAI,MAAM,kBAAkB,OAAO;AACnF,WAAO;AAAA;AAAA,uCAE4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAMlB,CAAC;AAAA,UACZ,UAAU,YAAY;AAAA;AAAA;AAAA,EAG9B;AAAA,EAGA,AAAU,QAAQ,SAA+B;AAE/C,UAAM,UAAU,OAAO;AACvB,QAAI,QAAQ,IAAI,OAAO;AAAG,WAAK,aAAa;AAC5C,QAAI,QAAQ,IAAI,gBAAgB;AAAG,WAAK,KAAK;AAC7C,KAAC,GAAG,QAAQ,KAAK,CAAC,EAAE,QAAQ,OAAK,KAAK,sBAAsB,CAAC,CAAC;AAAA,EAChE;AAAA,EAGA,MAAM,uBAAsC;AAC1C,UAAM,qBAAqB;AAE3B,UAAM,KAAK,UAAU;AAAA,EACvB;AAAA,EAOA,AAAO,QAAc;AAEnB,SAAK,SAAS,QAAQ;AACtB,SAAK,qBAAqB;AAC1B,aAAS,IAAgB,MAAM,EAAE,OAAO,KAAK,CAAC;AAAA,EAChD;AAAA,EAGA,AAAO,OAAa;AAElB,SAAK,SAAS,KAAK;AAAA,EACrB;AAAA,EAGA,AAAO,QAAc;AAEnB,SAAK,SAAS,MAAM;AAAA,EACtB;AAAA,EAOA,AAAU,YAAY,SAAsC;AAC1D,WAAO,IAAI,oBAAqB,KAAK,YAAkC,IAAI,OAAO;AAAA,EACpF;AAAA,EAKA,AAAQ,eAAqB;AAC3B,SAAK,qBAAqB;AAC1B,SAAK,UAAU,KAAK,KAAK;AAAA,EAC3B;AAAA,EAQA,AAAU,KAAK,MAAc,QAAkB,MAAwB;AACrE,SAAK,cAAc,IAAI,YAAY,MAAM,EAAE,QAAQ,GAAG,KAAK,CAAC,CAAC;AAAA,EAC/D;AAAA,EAKA,AAAQ,UAAU,OAAoC;AACpD,SAAK,cAAc,IAAI,WAAW,SAAS,EAAE,MAAM,CAAC,CAAC;AAAA,EACvD;AAAA,EAMA,AAAU,0BAA0B,cAA8B;AAChE,WAAO,KAAK,iBAAiB,iBAAiB,YAAY;AAAA,EAC5D;AAAA,EAOO,MAAgB,eACrB,UACgC;AAChC,UAAM,EAAE,QAAQ,MAAM,gBAAgB,MAAM,SAAS,MAAM,QAAQ,SAAS,EAAE,GAAG,SAAS;AAC1F,aAAS,IAAgB,MAAM,EAAE,OAAO,eAAe,QAAQ,MAAM,CAAC;AACtE,UAAM,KAAK;AACX,QAAI;AAAO,YAAM;AAAA;AACZ,aAAO;AAAA,EACd;AAAA,EAIA,AAAU,cAAqC;AAAE;AAAA,EAAY;AAAA,EAK7D,MAAc,OAAsB;AAClC,UAAM,KAAK,QAAQ;AACnB,UAAM,KAAK,WAAW;AACtB,UAAM,KAAK,YAAa;AACxB,SAAK,qBAAqB;AAC1B,SAAK,WAAW,KAAK;AACrB,SAAK,MAAM;AAAA,EACb;AAAA,EAKA,AAAQ,uBAA6B;AACnC,QAAI,CAAC,KAAK;AAAS;AAEnB,SAAK,QAAQ,GAAG,SAAS,KAAK,OAAO;AAErC,SAAK,QAAQ,GAAG,SAAS,KAAK,OAAO;AAErC,SAAK,QAAQ,GAAG,QAAQ,KAAK,MAAM;AAAA,EACrC;AAAA,EAKA,MAAc,aAA4B;AACxC,UAAM,EAAE,gBAAgB,eAAe,WAAW;AAClD,QAAI,CAAC;AACH,eAAS,IAAgB,MAAM,EAAE,UAAU,MAAM,SAAS,MAAM,QAAQ,KAAK,CAAC;AAAA,SAC3E;AACH,UAAI;AACF,cAAM,UAAU,EAAE,eAAe,OAAO;AACxC,cAAM,SACD,OAAO,SAAU,OAAO,OAAO,gBAAgB,OAAO,IACvD,MAAM,WAAW,gBAAgB,OAAO;AAC5C,cAAM,WAAW,QAAQ,SAAS;AAClC,iBAAS,IAAgB,MAAM,EAAE,UAAU,OAAO,MAAM,OAAO,CAAC;AAAA,MAClE,SAAS,GAAP;AAEA,gBAAQ,KAAK,CAAC;AACd,cAAM,QAAQ,KAAK,YAAY,iCAAiC;AAChE,iBAAS,IAAgB,MAAM,EAAE,UAAU,MAAM,OAAO,QAAQ,KAAK,CAAC;AAAA,MACxE,UAAE;AACA,cAAM,KAAK;AAAA,MACb;AAAA,IACF;AAAA,EACF;AAAA,EAKA,AAAQ,QAAc;AAEpB,QAAI,CAAC,KAAK,WAAW;AACnB,YAAM,KAAK,YAAY,sBAAsB;AAC/C,SAAK,SAAS,MAAM,KAAK,WAAW,KAAoB;AAAA,EAC1D;AAAA,EAKA,MAAc,UAAyB;AACrC,SAAK,SAAS,UAAU;AACxB,aAAS,IAAgB,MAAM,EAAE,SAAS,KAAK,CAAC;AAChD,UAAM,KAAK;AAAA,EACb;AAAA,EAKO,MAAc,SAAwB;AAC3C,aAAS,IAAgB,MAAM,EAAE,SAAS,MAAM,CAAC;AACjD,UAAM,KAAK;AAAA,EACb;AAAA,EAEO,MAAc,UAAyB;AAC5C,aAAS,IAAgB,MAAM,EAAE,SAAS,KAAK,CAAC;AAChD,UAAM,KAAK;AAAA,EACb;AAAA,EAKO,MAAc,QAAQ,OAAuD;AAClF,aAAS,IAAgB,MAAM,EAAE,OAAO,KAAK,CAAC;AAC9C,UAAM,KAAK;AACX,SAAK,KAAK,SAAS,KAAK;AAAA,EAC1B;AAAA,EAKA,MAAc,qBAAoC;AAChD,UAAM,UAAU,CAAC,UAAuB,SAAS,IAAgB,MAAM,EAAE,MAAM,CAAC;AAChF,UAAM,YAAY,CAAC,YAA2B,KAAK,KAAK,WAAW,OAAO;AAC1E,UAAM,QAAQ,KAAK,SAAS;AAC5B,UAAM,SAAS,KAAK,UAAU;AAC9B,UAAM,gBAAgB,KAAK,iBAAiB;AAC5C,UAAM,OAAO,KAAK,UAAU,EAAE,OAAO,QAAQ,cAAc,CAAC;AAC5D,UAAM,UAAU,EAAE,gBAAgB,mBAAmB;AACrD,UAAM,SAAS;AACf,WAAO,MAAM,KAAK,QAAS,EAAE,MAAM,SAAS,OAAO,CAAC,EACjD,KAAK,gBAAgB,EACrB,KAAK,SAAS,EACd,MAAM,OAAO;AAAA,EAClB;AAAA,EAKA,AAAQ,sBAAsB,MAAyB;AACrD,QAAI,CAAC,iBAAiB,IAAc;AAClC;AACF,UAAM,QAAQ,KAAK;AAEnB,QAAI,CAAC;AACH;AACF,SAAK,KAAK,GAAG,KAAK,IAAc,KAAK,KAAK;AAC1C,QAAI,KAAK;AACP,WAAK,mBAAmB;AAAA,EAC5B;AAAA,EAKA,AAAQ,uBAA6B;AACnC,aAAS,IAAgB,MAAM;AAAA,MAC7B,eAAe;AAAA,MACf,OAAO;AAAA,MACP,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AACF;AA9X8B;AAAA,EAA5B,AAAC,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GAAE,AA5CjB,WA4CiB;AAK4B;AAAA,EAAxD,AAAC,SAAS,EAAE,MAAM,QAAQ,WAAW,gBAAgB,CAAC;AAAA,GAAE,AAjD7C,WAiD6C;AAK5B;AAAA,EAA5B,AAAC,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GAAE,AAtDjB,WAsDiB;AAM6C;AAAA,EADzE;AAAA,EACA,AAAC,SAAS,EAAE,MAAM,QAAQ,WAAW,mBAAmB,SAAS,KAAK,CAAC;AAAA,GAAE,AA5D9D,WA4D8D;AAGJ;AAAA,EAArE,AAAC,SAAS,EAAE,MAAM,SAAS,WAAW,cAAc,SAAS,KAAK,CAAC;AAAA,GAAE,AA/D1D,WA+D0D;AAGZ;AAAA,EAAzD,AAAC,SAAS,EAAE,MAAM,QAAQ,WAAW,iBAAiB,CAAC;AAAA,GAAE,AAlE9C,WAkE8C;AAGR;AAAA,EAAjD,AAAC,SAAS,EAAE,MAAM,QAAQ,WAAW,SAAS,CAAC;AAAA,GAAE,AArEtC,WAqEsC;AAYxC;AAAA,EAHT;AAAA,EACA;AAAA,EACA,AAAC,SAAS,EAAE,MAAM,QAAQ,WAAW,iBAAiB,CAAC;AAAA,GAC9C,AAjFE,WAiFF;AAQA;AAAA,EAHT;AAAA,EACA;AAAA,EACA,AAAC,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GACjB,AAzFE,WAyFF;AAQA;AAAA,EAHT;AAAA,EACA;AAAA,EACA,AAAC,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GACjB,AAjGE,WAiGF;AAOA;AAAA,EAFT;AAAA,EACA,AAAC,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GACjB,AAxGE,WAwGF;AAOA;AAAA,EAFT;AAAA,EACA,AAAC,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GACjB,AA/GE,WA+GF;AAQA;AAAA,EAHT;AAAA,EACA;AAAA,EACA,AAAC,SAAS,EAAE,MAAM,QAAQ,SAAS,MAAM,WAAW,eAAe,CAAC;AAAA,GAC3D,AAvHE,WAuHF;AAQA;AAAA,EAHT;AAAA,EACA;AAAA,EACA,AAAC,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GACjC,AA/HE,WA+HF;AAQA;AAAA,EAHT;AAAA,EACA;AAAA,EACA,AAAC,SAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GACjC,AAvIE,WAuIF;AAOA;AAAA,EAFT;AAAA,EACA,AAAC,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GACjB,AA9IE,WA8IF;AAMG;AAAA,EAAZ,AAAC,SAAS;AAAA,GAAE,AApJD,WAoJC;AAE8B;AAAA,EAA1C,AAAC,SAAS,EAAE,WAAW,gBAAgB,CAAC;AAAA,GAAE,AAtJ/B,WAsJ+B;AACG;AAAA,EAA7C,AAAC,SAAS,EAAE,WAAW,mBAAmB,CAAC;AAAA,GAAE,AAvJlC,WAuJkC;AACJ;AAAA,EAAzC,AAAC,SAAS,EAAE,WAAW,eAAe,CAAC;AAAA,GAAE,AAxJ9B,WAwJ8B;AACC;AAAA,EAA1C,AAAC,SAAS,EAAE,WAAW,gBAAgB,CAAC;AAAA,GAAE,AAzJ/B,WAyJ+B;AACH;AAAA,EAAvC,AAAC,SAAS,EAAE,WAAW,aAAa,CAAC;AAAA,GAAE,AA1J5B,WA0J4B;AACC;AAAA,EAAxC,AAAC,SAAS,EAAE,WAAW,cAAc,CAAC;AAAA,GAAE,AA3J7B,WA2J6B;AACC;AAAA,EAAzC,AAAC,SAAS,EAAE,WAAW,eAAe,CAAC;AAAA,GAAE,AA5J9B,WA4J8B;AAyHlB;AAAA,EAAvB;AAAA,GAAuB,AArRZ,WAqRY;AAuFF;AAAA,EAArB;AAAA,GAAqB,AA5WV,WA4WU;AAKA;AAAA,EAArB;AAAA,GAAqB,AAjXV,WAiXU;AAQA;AAAA,EAArB;AAAA,GAAqB,AAzXV,WAyXU;;;AD1bvB;AACA;AACA;AACA;;;AITA;AACO,IAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBtB,IAAO,iBAAQ;;;ACjBf;AACO,IAAM,UAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBtB,IAAO,0BAAQ;;;ALAf,IAAM,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,IAAM,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AACF;AA4HO,IAAM,iBAAN,cAA6B,WAAW;AAAA,EAAxC;AAAA;AAiBgD,oBAAW;AAMJ,0BAAiB;AAKxB,qBAAuB;AAMhD,iBAA0B,CAAC;AAUvD,SAAS,QAA0B;AAQnC,SAAS,WAAoB;AAQ7B,SAAS,QAAiB;AAQ1B,SAAS,UAAmB;AAAA;AAAA,EAOd,MAAa,oBACzB,oBAAoD,KAAK,qBAAqB,GACzC;AACrC,WAAO,KAAK,OAAQ,oBAAoB,iBAAiB;AAAA,EAC3D;AAAA,EAKc,MAAa,aACzB,aAAsC,KAAK,YACb;AAC9B,WAAO,KAAK,OAAQ,aAAa,KAAK,SAAS,UAAU;AAAA,EAC3D;AAAA,EAKc,MAAa,YACzB,YAAY,KAAK,WACY;AAC7B,WAAO,KAAK,OAAQ,YAAY,KAAK,SAAS,SAAS;AAAA,EACzD;AAAA,EAKA,AAAO,qBAA8B;AACnC,WAAQ,CAAC,KAAK,YAAY,CAAC,KAAK,SAAS,CAAC,KAAK,SAAU,KAAK,SAAS;AAAA,EACzE;AAAA,EAKA,AAAO,QAAc;AACnB,UAAM,MAAM;AAEZ,SAAK,SAAS,MAAM;AAAA,EACtB;AAAA,EAKA,MAAa,SAAyC;AACpD,YAAQ,KAAK;AAAA,WACN;AAAkB,eAAO,KAAK,oBAAoB;AAAA,WAClD;AAAU,eAAO,KAAK,aAAa;AAAA,WACnC;AAAS,eAAO,KAAK,YAAY;AAAA,eAC7B;AACP,cAAM,QAAQ,KAAK,YAAY,mBAAmB,KAAK,UAAU;AACjE,kBAAS,IAAoB,MAAM,EAAE,MAAM,CAAC;AAC5C,cAAM,KAAK;AACX,cAAM;AAAA,MACR;AAAA;AAAA,EAEJ;AAAA,EAKA,AAAO,WAAoB;AACzB,UAAM,EAAE,UAAU,OAAO,UAAU;AACnC,UAAM,UAAU,CAAC,SAAS,YAAY,CAAC;AACvC,QAAI,SAAS,CAAC;AACZ,gBAAS,IAAoB,MAAM,EAAE,OAAO,KAAK,YAAY,4BAA4B,EAAE,CAAC;AAC9F,WAAO;AAAA,EACT;AAAA,EAEA,AAAO,cAAc;AACnB,SAAK,SAAS,OAAO;AAAA,MACnB,OAAO,KAAK,wBAAwB;AAAA,IACtC,CAAC;AAAA,EACH;AAAA,EAOA,AAAQ,uBAAuD;AAC7D,UAAM,OAAO;AACb,UAAM,EAAE,gBAAgB,sBAAsB;AAC9C,WAAQ;AAAA,MACN,iBAAiB;AAAA,MACjB,GAAG;AAAA,MACH;AAAA,MACA,MAAM,KAAK;AAAA,IACb;AAAA,EACF;AAAA,EAKA,AAAQ,0BAAqD;AAC3D,UAAM,WAAW,CAAC,SAChB,KAAK,0BAA0B,IAAI,KAAK;AAE1C,UAAM,SAAS,CAAC,QAAQ,YAAY,SAAS,SAAS;AACtD,UAAM,aAAa,CAAC,UAAkB,CAAC,KAAsB,QAAgB;AAC3E,UAAI,MAAM,SAAS,GAAG;AAAG,eAAO;AAChC,YAAM,UAAU,IAAI,MAAM,GAAG,EAAE,IAAI;AACnC,aAAO;AAAA,QACL,GAAG;AAAA,QACH,CAAC,MAAM,eAAe,OAAO,aAAa,GAAG,SAAS,SAAS,GAAG,CAAC,CAAC;AAAA,MACtE;AAAA,IACF;AAEA,UAAM,eAAe,CAAC,UAAkB,CAAC,MAAuB,MAA+B;AAC7F,YAAM,OAAO,qBAAqB,SAAS,MAAK,CAAC;AACjD,aAAQ;AAAA,QACN,GAAG;AAAA,QACH,CAAC,IAAI,SAAS,IAAI;AAAA,QAClB,GAAG,WAAW,OAAO,WAAW,KAAK,GAAG,CAAC,CAAC;AAAA,MAC5C;AAAA,IACF;AAEA,WAAO,OAAO,OAAO,CAAC,KAAK,UAAW;AAAA,MACpC,GAAG;AAAA,MACH,CAAC,QAAQ,eAAe,OAAO,aAAa,KAAK,GAAG,CAAC,CAAC;AAAA,IACxD,IAAI,CAAC,CAAC;AAAA,EACR;AAAA,EAEA,MAAgB,cAA6B;AAC3C,QAAI,CAAC,KAAK;AAAQ;AAClB,UAAM,EAAE,gBAAgB,UAAU,WAAW,UAAU;AACvD,UAAM,QAAQ,KAAK,wBAAwB;AAE3C,UAAM,KAAK;AAEX,UAAM,UAAU,KAAK,cAAc;AAAA,MACjC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,YAAQ,GAAG,UAAU,KAAK,QAAQ;AAClC,cAAS,IAAoB,MAAM,EAAE,QAAQ,CAAC;AAC9C,UAAM,KAAK;AAAA,EACb;AAAA,EAEA,AAAQ,cAAc,SAA0C;AAC9D,UAAM,UAAU,KAAK,SAAU,OAAO,QAAQ,OAAO;AACrD,WAAO;AAAA,EACT;AAAA,EAKO,MAAc,SAAS,OAA2D;AACvF,UAAM,EAAE,OAAO,UAAU,OAAO,QAAQ,SAAS;AACjD,UAAM,UAAU,CAAE,UAAU,CAAC,SAAS,CAAC;AACvC,cAAS,IAAoB,MAAM,EAAE,OAAO,UAAU,OAAO,OAAO,QAAQ,CAAC;AAC7E,UAAM,KAAK;AACX,SAAK,KAAK,UAAU,KAAK;AAAA,EAC3B;AACF;AAvOE,AADW,eACK,KAAK;AAErB,AAHW,eAGK,cAAc;AAE9B,AALW,eAKK,SAAS;AAAA,EACvB;AAAA,EACA;AACF;AASqD;AAAA,EAArD,AAAC,UAAS,EAAE,MAAM,SAAS,WAAW,YAAY,CAAC;AAAA,GAAE,AAjB1C,eAiB0C;AAMO;AAAA,EAA5D,AAAC,UAAS,EAAE,MAAM,SAAS,WAAW,mBAAmB,CAAC;AAAA,GAAE,AAvBjD,eAuBiD;AAKP;AAAA,EAArD,AAAC,UAAS,EAAE,MAAM,QAAQ,WAAW,aAAa,CAAC;AAAA,GAAE,AA5B1C,eA4B0C;AAMzB;AAAA,EAA5B,AAAC,UAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GAAE,AAlCjB,eAkCiB;AAUnB;AAAA,EAHT;AAAA,EACA;AAAA,EACA,AAAC,UAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GACjB,AA5CE,eA4CF;AAQA;AAAA,EAHT;AAAA,EACA;AAAA,EACA,AAAC,UAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GACjC,AApDE,eAoDF;AAQA;AAAA,EAHT;AAAA,EACA;AAAA,EACA,AAAC,UAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GACjC,AA5DE,eA4DF;AAQA;AAAA,EAHT;AAAA,EACA;AAAA,EACA,AAAC,UAAS,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,GACjC,AApEE,eAoEF;AAOkB;AAAA,EAA3B;AAAA,GAA2B,AA3EhB,eA2EgB;AASA;AAAA,EAA3B;AAAA,GAA2B,AApFhB,eAoFgB;AASA;AAAA,EAA3B;AAAA,GAA2B,AA7FhB,eA6FgB;AAoIN;AAAA,EAArB;AAAA,GAAqB,AAjOV,eAiOU;AAjOV,iBAAN;AAAA,EADP,AAAC,cAAc,iBAAiB;AAAA,GACnB;",
  "names": []
}
