{
  "version": 3,
  "sources": ["src/stripe-payment-request.ts", "src/StripeBase.ts", "src/breadcrumb-controller.ts", "node_modules/@stripe/stripe-js/dist/pure.esm.js", "src/shared.css", "src/stripe-payment-request.css"],
  "sourcesContent": ["import type * as Stripe from '@stripe/stripe-js';\nimport type { CountryCode } from './lib/countries.js';\nimport type { PropertyValues } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport { bound } from './lib/bound.js';\n\nimport { StripeBase } from './StripeBase.js';\nimport { throwResponseError } from './lib/stripe.js';\nimport sharedStyles from './shared.css';\nimport style from './stripe-payment-request.css';\nimport { readonly } from './lib/read-only.js';\nimport { notify } from './lib/notify.js';\n\ninterface StripeDisplayItem extends HTMLElement {\n  dataset: {\n    amount: string;\n    label: string;\n    pending?: string;\n  };\n}\n\ninterface StripeShippingOption extends HTMLElement {\n  dataset: {\n    id: string;\n    label: string;\n    detail?: string;\n    amount: string;\n  };\n}\n\ntype StripePaymentRequestButtonType =\n  Stripe.StripePaymentRequestButtonElementOptions['style']['paymentRequestButton']['type'];\n\ntype StripePaymentRequestButtonTheme =\n  Stripe.StripePaymentRequestButtonElementOptions['style']['paymentRequestButton']['theme'];\n\ntype StripePaymentRequestEvent =\n  | Stripe.PaymentRequestPaymentMethodEvent\n  | Stripe.PaymentRequestSourceEvent\n  | Stripe.PaymentRequestTokenEvent;\n\ntype StripePaymentRequestResponse =\n  | Stripe.SourceResult\n  | Stripe.TokenResult\n  | Stripe.PaymentMethodResult\n\ntype PaymentResponseOrError =\n  | Stripe.StripeError\n  | Stripe.PaymentIntentResult\n  | Stripe.TokenResult\n  | Stripe.SourceResult\n\nexport type PaymentResponseHandler =\n  (x: PaymentResponseOrError) => PaymentResponseOrError\n\nexport const enum Events {\n  success = 'success',\n  fail = 'fail',\n  cancel = 'cancel',\n}\n\nexport function isStripeDisplayItem(el: Element): el is StripeDisplayItem {\n  return el.tagName.toLowerCase() === 'stripe-display-item';\n}\n\nfunction datasetToStripeDisplayItem(\n  { dataset: { amount, label, pending } }: StripeDisplayItem\n): Stripe.PaymentRequestItem {\n  return {\n    label,\n    amount: parseInt(amount),\n    ...pending !== undefined && { pending: pending === 'true' ? true : false },\n  };\n}\n\nexport function isStripeShippingOption(el: Element): el is StripeShippingOption {\n  return el.tagName.toLowerCase() === 'stripe-shipping-option';\n}\n\nfunction datasetToStripeShippingOption(\n  { dataset: { amount, detail, ...rest } }: StripeShippingOption\n): Stripe.PaymentRequestShippingOption {\n  return {\n    amount: parseInt(amount),\n    detail,\n    ...rest,\n  };\n}\n\nfunction mapDataset(\n  el: StripeDisplayItem|StripeShippingOption\n): Stripe.PaymentRequestItem|Stripe.PaymentRequestShippingOption {\n  return (\n      isStripeDisplayItem(el) ? datasetToStripeDisplayItem(el)\n    : datasetToStripeShippingOption(el)\n  );\n}\n\n/**\n * Custom element wrapper for Stripe.js v3 Payment Request Buttons.\n *\n * \uD83D\uDC68\u200D\uD83C\uDFA8 [Live Demo](https://bennypowers.dev/stripe-elements/?path=/docs/stripe-payment-request--enter-a-stripe-publishable-key) \uD83D\uDC40\n *\n * ### \uD83E\uDDD9\u200D\u2642\uFE0F Usage\n * If you prebuilt with Snowpack, load the module from your `web_modules` directory\n *\n * ```html\n * <script type=\"module\" src=\"/web_modules/@power-elements/stripe-elements/stripe-payment-request.js\"></script>\n * ```\n *\n * Alternatively, load the module from the unpkg CDN\n * ```html\n * <script type=\"module\" src=\"https://unpkg.com/@power-elements/stripe-elements/stripe-payment-request.js?module\"></script>\n * ```\n *\n * Then you can add the element to your page.\n *\n * ```html\n *\n * <stripe-payment-request id=\"payment-request\"\n *     publishable-key=\"pk_test_XXXXXXXXXXXXXXXXXXXXXXXX\"\n *     generate=\"token\"\n *     action=\"/charges\"\n *     country=\"CA\"\n *     currency=\"cad\"\n *     amount=\"1000\"\n *     label=\"Ten Bones\"\n *     request-payer-name\n *     request-payer-email\n *     request-payer-phone\n * ></stripe-payment-request>\n * ```\n *\n * See the demos for more comprehensive examples.\n *   - Using `<stripe-payment-request>` with [plain HTML and JavaScript](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-vanilla--stripe-payment-request).\n *   - Using `<stripe-payment-request>` in a [LitElement](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-litelement--stripe-payment-request).\n *   - Using `<stripe-payment-request>` in a [Vue Component](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-vue--stripe-payment-request).\n *   - Using `<stripe-payment-request>` in an [Angular component](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-angular--stripe-payment-request).\n *   - Using `<stripe-payment-request>` in a [React component](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-react--stripe-payment-request).\n *   - Using `<stripe-payment-request>` in a [Preact component](https://bennypowers.dev/stripe-elements/?path=/docs/framework-examples-preact--stripe-payment-request).\n *\n * @cssprop [--stripe-payment-request-element-min-width=`300px`] - min-width property of the container element\n * @cssprop [--stripe-payment-request-element-padding=`8px 12px`] - padding property of the container element\n * @cssprop [--stripe-payment-request-element-background=`white`] - background property of the container element\n *\n * @element stripe-payment-request\n * @extends StripeBase\n *\n * @fires 'unsupported' - When the element detects that the user agent cannot make a payment\n * @fires 'fail' - When a payment request fails\n * @fires 'cancel' - When a payment request is cancelled\n * @fires 'shippingaddresschange' - When the user chooses a different shipping address\n * @fires 'shippingoptionchange' - When the user chooses a different shipping option\n */\n@customElement('stripe-payment-request')\nexport class StripePaymentRequest extends StripeBase {\n  static readonly is = 'stripe-payment-request';\n\n  static readonly styles = [\n    sharedStyles,\n    style,\n  ];\n\n  /**\n   * The amount in the currency's subunit (e.g. cents, yen, etc.)\n   */\n  @property({ type: Number, reflect: true })\n  amount: number;\n\n  /**\n   * Whether or not the device can make the payment request.\n   * @readonly\n   */\n  @notify\n  @readonly\n  @property({ type: Boolean, attribute: 'can-make-payment', reflect: true })\n  readonly canMakePayment: Stripe.CanMakePaymentResult = null;\n\n  /**\n   * The two-letter country code of your Stripe account\n   * @example CA\n   */\n  @property({ type: String })\n  country: CountryCode;\n\n  /**\n   * Three character currency code\n   * @example usd\n   */\n  @property({ type: String })\n  currency: Stripe.PaymentRequestOptions['currency'];\n\n  #displayItems: Stripe.PaymentRequestItem[];\n\n  /**\n   * An array of PaymentRequestItem objects. These objects are shown as line items in the browser\u2019s payment interface. Note that the sum of the line item amounts does not need to add up to the total amount above.\n   */\n  @property({ type: Array })\n  get displayItems(): Stripe.PaymentRequestItem[] {\n    const value = this.#displayItems;\n    return (\n        Array.isArray(value) ? value\n      : this.parseDatasets('stripe-display-item')\n    );\n  }\n\n  set displayItems(value) {\n    const oldValue = this.displayItems;\n    this.#displayItems = value;\n    this.requestUpdate('displayItems', oldValue);\n  }\n\n  /**\n   * A name that the browser shows the customer in the payment interface.\n   */\n  @property({ type: String, reflect: true })\n  label: string;\n\n  /**\n   * Stripe PaymentIntent\n   */\n  @notify\n  @readonly\n  @property({ type: Object, attribute: 'payment-intent' })\n  readonly paymentIntent: Stripe.PaymentIntent = null;\n\n  /**\n   * Stripe PaymentRequest\n   */\n  @readonly\n  @property({ type: Object, attribute: 'payment-request' })\n  readonly paymentRequest: Stripe.PaymentRequest = null;\n\n  /**\n   * If you might change the payment amount later (for example, after you have calcluated shipping costs), set this to true. Note that browsers treat this as a hint for how to display things, and not necessarily as something that will prevent submission.\n   */\n  @property({ type: Boolean, reflect: true })\n  pending = false;\n\n  /**\n   * See the requestPayerName option.\n   */\n  @property({ type: Boolean, attribute: 'request-payer-email' })\n  requestPayerEmail: boolean;\n\n  /**\n   * By default, the browser\u2018s payment interface only asks the customer for actual payment information. A customer name can be collected by setting this option to true. This collected name will appears in the PaymentResponse object.\n   *\n   * We highly recommend you collect at least one of name, email, or phone as this also results in collection of billing address for Apple Pay. The billing address can be used to perform address verification and block fraudulent payments. For all other payment methods, the billing address is automatically collected when available.\n   */\n  @property({ type: Boolean, attribute: 'request-payer-name' })\n  requestPayerName: boolean;\n\n  /**\n   * See the requestPayerName option.\n   */\n  @property({ type: Boolean, attribute: 'request-payer-phone' })\n  requestPayerPhone: boolean;\n\n  /**\n   * Collect shipping address by setting this option to true. The address appears in the PaymentResponse.\n   * You must also supply a valid [ShippingOptions] to the shippingOptions property. This can be up front at the time stripe.paymentRequest is called, or in response to a shippingaddresschange event using the updateWith callback.\n   */\n  @property({ type: Boolean, attribute: 'request-shipping' })\n  requestShipping: boolean;\n\n  #shippingOptions: Stripe.PaymentRequestShippingOption[]\n\n  /**\n   * An array of PaymentRequestShippingOption objects. The first shipping option listed appears in the browser payment interface as the default option.\n   */\n  @property({ type: Array }) get shippingOptions(): Stripe.PaymentRequestShippingOption[] {\n    const value = this.#shippingOptions;\n    return Array.isArray(value) ? value : this.parseDatasets('stripe-shipping-option');\n  }\n\n  set shippingOptions(value) {\n    const oldValue = this.shippingOptions;\n    this.#shippingOptions = value;\n    this.requestUpdate('shippingOptions', oldValue);\n  }\n\n  @property({ type: String, attribute: 'button-type' })\n  buttonType: StripePaymentRequestButtonType = 'default';\n\n  @property({ type: String, attribute: 'button-theme' })\n  buttonTheme: StripePaymentRequestButtonTheme = 'dark';\n\n  /* PUBLIC API */\n\n  public reset(): void {\n    super.reset();\n    readonly.set<StripePaymentRequest>(this, { paymentIntent: null });\n  }\n\n  /* LIFECYCLE */\n\n  /** @inheritdoc */\n  protected updated(changed: PropertyValues): void {\n    super.updated(changed);\n    if (changed.has('generate')) this.initPaymentRequestListeners();\n    if (changed.has('amount')) this.updatePaymentRequest();\n  }\n\n  /* PRIVATE API */\n\n  /**\n   * Creates a PaymentRequestOptions object.\n   */\n  private getStripePaymentRequestOptions(): Stripe.PaymentRequestOptions {\n    const {\n      country,\n      currency,\n      displayItems,\n      shippingOptions,\n      requestShipping,\n      requestPayerEmail,\n      requestPayerName,\n      requestPayerPhone,\n      label = '',\n      amount = 0,\n    } = this;\n    const total = { label, amount };\n    return {\n      country,\n      currency,\n      displayItems,\n      requestPayerEmail,\n      requestPayerName,\n      requestPayerPhone,\n      requestShipping,\n      shippingOptions,\n      total,\n    };\n  }\n\n  /**\n   * Initializes the PaymentRequest Object.\n   */\n  protected async initElement(): Promise<void> {\n    await this.initPaymentRequest();\n    await this.initPaymentRequestListeners();\n    await this.initPaymentRequestButton();\n  }\n\n  /**\n   * Initialized the `PaymentRequest` object.\n   */\n  private async initPaymentRequest(): Promise<void> {\n    if (!this.stripe) return;\n    const stripePaymentRequestOptions = this.getStripePaymentRequestOptions();\n    const paymentRequest = this.stripe.paymentRequest(stripePaymentRequestOptions);\n    const canMakePayment = await paymentRequest.canMakePayment();\n    readonly.set<StripePaymentRequest>(this, { paymentRequest, canMakePayment });\n    await this.updateComplete;\n    if (!this.canMakePayment) this.fire('unsupported');\n  }\n\n  /**\n   * Creates Stripe Payment Request Element.\n   */\n  private async initPaymentRequestButton(): Promise<void> {\n    const { buttonTheme: theme, buttonType: type, canMakePayment, paymentRequest } = this;\n    if (!canMakePayment || !this.elements) return;\n    const propertyName = '--stripe-payment-request-button-height';\n    const height = this.getCSSCustomPropertyValue(propertyName) || '40px';\n    const style = { paymentRequestButton: { height, theme, type } };\n    const element = this.elements.create('paymentRequestButton', { paymentRequest, style });\n    readonly.set<StripePaymentRequest>(this, { element });\n    await this.updateComplete;\n  }\n\n  /**\n   * Attaches listeners to the `PaymentRequest` object.\n   */\n  private async initPaymentRequestListeners(): Promise<void> {\n    if (!this.canMakePayment) return;\n    // @ts-expect-error: the types are incomplete in @types/stripe.js\n    this.paymentRequest.on('click', this.updatePaymentRequest);\n    this.paymentRequest.on('cancel', this.onCancel);\n    this.paymentRequest.on('shippingaddresschange', this.onShippingaddresschange);\n    this.paymentRequest.on('shippingoptionchange', this.onShippingoptionchange);\n    switch (this.generate) {\n      case 'payment-method': this.paymentRequest.on('paymentmethod', this.onPaymentResponse); break;\n      case 'source': this.paymentRequest.on('source', this.onPaymentResponse); break;\n      case 'token': this.paymentRequest.on('token', this.onPaymentResponse); break;\n    }\n  }\n\n  /**\n   * Updates the PaymentRequests's values\n   */\n  private async updatePaymentRequest() {\n    if (!this.paymentRequest) return;\n    const { currency, total, displayItems, shippingOptions } =\n      this.getStripePaymentRequestOptions();\n    this.paymentRequest.update({ currency, total, displayItems, shippingOptions });\n  }\n\n  /**\n   * Handle a `cancel` event\n   */\n  @bound private onCancel(): void {\n    this.fire(Events.cancel);\n  }\n\n  /**\n   * Completes the PaymentRequest.\n   */\n  private complete = async (\n    paymentResponse: Stripe.PaymentRequestPaymentMethodEvent,\n    confirmationError?: Stripe.StripeError\n  ): Promise<StripePaymentRequestResponse | { error: Stripe.StripeError | null }> => {\n    const { error: paymentResponseError = null } = { ...paymentResponse };\n    const status = (paymentResponseError || confirmationError) ? Events.fail : Events.success;\n    paymentResponse.complete(status);\n    this.fire(status, paymentResponse);\n    return confirmationError ? { error: confirmationError } : paymentResponse;\n  }\n\n  /**\n   * Handle a paymentResponse from Stripe\n   */\n  @bound private async onPaymentResponse(event: StripePaymentRequestEvent): Promise<void> {\n    const {\n      error = null,\n      paymentMethod = null,\n      source = null,\n      token = null,\n    } = { ...event };\n\n    readonly.set<StripePaymentRequest>(this, { error, paymentMethod, source, token });\n\n    const isPaymentIntent = this.clientSecret && !error;\n\n    if (isPaymentIntent)\n      this.confirmPaymentIntent(event as Stripe.PaymentRequestPaymentMethodEvent);\n    else\n      this.complete(event as Stripe.PaymentRequestPaymentMethodEvent);\n  }\n\n  /**\n   * When a PaymentIntent client secret is set, confirm the payment\n   */\n  @bound private async confirmPaymentIntent(\n    paymentResponse: Stripe.PaymentRequestPaymentMethodEvent\n  ): Promise<void> {\n    const confirmCardData = { payment_method: this.paymentMethod.id };\n    const { error = null, paymentIntent = null } =\n      await this.confirmCardPayment(confirmCardData, { handleActions: false })\n        .then(({ error: confirmationError }) => this.complete(paymentResponse, confirmationError)) // throws if first confirm errors\n        .then(throwResponseError)\n        .then(() => this.confirmCardPayment())\n        .then(throwResponseError)\n        .catch(error => ({ error })); // catch error from first confirm\n\n    readonly.set<StripePaymentRequest>(this, { error, paymentIntent });\n    await this.updateComplete;\n  }\n\n  /**\n   * Stripe confirmCardPayment method\n   */\n  @bound private async confirmCardPayment(\n    data?: Stripe.ConfirmCardPaymentData,\n    options?: Stripe.ConfirmCardPaymentOptions\n  ): Promise<Stripe.PaymentIntentResult> {\n    return this.stripe.confirmCardPayment(this.clientSecret, data, options);\n  }\n\n  @bound private onShippingaddresschange(\n    originalEvent: Stripe.PaymentRequestShippingAddressEvent\n  ): void {\n    this.fire('shippingaddresschange', originalEvent);\n  }\n\n  @bound private onShippingoptionchange(\n    originalEvent: Stripe.PaymentRequestShippingOptionEvent\n  ): void {\n    this.fire('shippingoptionchange', originalEvent);\n  }\n\n  /**\n   * Parses an element's dataset number props from string to number\n   */\n  private parseDatasets(selector: 'stripe-shipping-option'): Stripe.PaymentRequestShippingOption[]\n\n  private parseDatasets(selector: 'stripe-display-item'): Stripe.PaymentRequestItem[]\n\n  private parseDatasets(\n    selector: 'stripe-display-item'|'stripe-shipping-option'\n  ): (Stripe.PaymentRequestItem|Stripe.PaymentRequestShippingOption)[] {\n    const elements =\n      [...this.querySelectorAll(selector)] as (StripeDisplayItem|StripeShippingOption)[];\n\n    return (\n        !elements.length ? []\n      : elements.map(mapDataset)\n    );\n  }\n}\n", "import type { TemplateResult, PropertyValues } from 'lit';\nimport type * as Stripe from '@stripe/stripe-js';\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\n\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport { bound } from './lib/bound.js';\n\nimport { dash } from './lib/strings.js';\nimport { isRepresentation } from './lib/predicates.js';\nimport { throwBadResponse } from './lib/fetch.js';\nimport { BreadcrumbController } from './breadcrumb-controller.js';\nimport { readonly } from './lib/read-only.js';\nimport { notify } from './lib/notify.js';\nimport { loadStripe } from '@stripe/stripe-js/pure.js';\nimport { StripeElementLocale } from '@stripe/stripe-js';\n\nexport const enum SlotName {\n  'stripe-elements' = 'stripe-elements-slot',\n  'stripe-payment-request' = 'stripe-payment-request-slot',\n}\n\nexport type PaymentRepresentation = 'payment-method'|'source'|'token'\n\nexport type StripePaymentResponse =\n  | Stripe.PaymentIntentResult\n  | Stripe.PaymentMethodResult\n  | Stripe.SetupIntentResult\n  | Stripe.TokenResult\n  | Stripe.SourceResult\n\ntype AmbiguousError =\n  Error|Stripe.StripeError|StripeElementsError;\n\ndeclare global {\n  interface Node {\n    getRootNode(options?: GetRootNodeOptions): Node|ShadowRoot;\n  }\n}\n\nclass StripeElementsError extends Error {\n  originalMessage: string;\n\n  constructor(tag: 'stripe-elements'|'stripe-payment-request', message: string) {\n    super(`<${tag}>: ${message}`);\n    this.originalMessage = message;\n  }\n}\n\nfunction isStripeElementsError(error: AmbiguousError): error is StripeElementsError {\n  return !!error && error instanceof StripeElementsError;\n}\n\nconst errorConverter = {\n  toAttribute: (error: AmbiguousError): string =>\n        !error ? null\n      : isStripeElementsError(error) ? error.originalMessage\n      : error.message || '',\n};\n\n/**\n * @fires 'error' - The validation error, or the error returned from stripe.com\n * @fires 'payment-method' - The PaymentMethod received from stripe.com\n * @fires 'source' - The Source received from stripe.com\n * @fires 'token' - The Token received from stripe.com\n * @fires 'success' - When a payment succeeds\n * @fires 'ready' - Stripe has been initialized and mounted\n *\n * @csspart 'error' - container for the error message\n * @csspart 'stripe' - container for the stripe element\n */\nexport class StripeBase extends LitElement {\n  static is: 'stripe-elements'|'stripe-payment-request'\n\n  /* PAYMENT CONFIGURATION */\n\n  /**\n   * billing_details object sent to create the payment representation. (optional)\n   */\n  billingDetails: Stripe.PaymentMethod.BillingDetails;\n\n  /**\n   * Data passed to stripe.createPaymentMethod. (optional)\n   */\n  paymentMethodData: Stripe.CreatePaymentMethodData;\n\n  /**\n   * Data passed to stripe.createSource. (optional)\n   */\n  sourceData: Stripe.CreateSourceData;\n\n  /**\n   * Data passed to stripe.createToken. (optional)\n   */\n  tokenData: Stripe.CreateTokenCardData;\n\n  /* SETTINGS */\n\n  /**\n   * If set, when Stripe returns the payment info (PaymentMethod, Source, or Token),\n   * the element will POST JSON data to this URL with an object containing\n   * a key equal to the value of the `generate` property.\n   * @example\n   * ```html\n   * <stripe-elements\n   *   publishable-key=\"pk_test_XXXXXXXXXXXXX\"\n   *   generate=\"token\"\n   *   action=\"/payment\"\n   * ></stripe-elements>\n   * ```\n   * will POST to `/payment` with JSON body `{ \"token\": { ... } }`\n   * ```js\n   * stripeElements.submit();\n   * ```\n   */\n  @property({ type: String })\n  action: string;\n\n  /**\n   * The `client_secret` part of a Stripe `PaymentIntent`\n   */\n  @property({ type: String, attribute: 'client-secret' })\n  clientSecret: string;\n\n  /**\n   * Type of payment representation to generate.\n   */\n  @property({ type: String })\n  generate: PaymentRepresentation = 'source';\n\n  /**\n   * Stripe Publishable Key. EG. `pk_test_XXXXXXXXXXXXXXXXXXXXXXXX`\n   */\n  @notify\n  @property({ type: String, attribute: 'publishable-key', reflect: true })\n  publishableKey: string;\n\n  /** Whether to display the error message */\n  @property({ type: Boolean, attribute: 'show-error', reflect: true })\n  showError = false;\n\n  /** Stripe account to use (connect) */\n  @property({ type: String, attribute: 'stripe-account' })\n  stripeAccount: string;\n\n  /** Stripe locale to use */\n  @property({ type: String, attribute: 'locale' })\n    locale: StripeElementLocale = 'auto';\n\n  /* READ-ONLY FIELDS */\n\n  /* PAYMENT REPRESENTATIONS */\n\n  /**\n   * Stripe PaymentMethod\n   */\n  @readonly\n  @notify\n  @property({ type: Object, attribute: 'payment-method' })\n  readonly paymentMethod: Stripe.PaymentMethod = null;\n\n  /**\n   * Stripe Source\n   */\n  @readonly\n  @notify\n  @property({ type: Object })\n  readonly source: Stripe.Source = null;\n\n  /**\n   * Stripe Token\n   */\n  @readonly\n  @notify\n  @property({ type: Object })\n  readonly token: Stripe.Token = null;\n\n  /**\n   * Stripe element instance\n   */\n  @readonly\n  @property({ type: Object })\n  readonly element: Stripe.StripeCardElement|Stripe.StripePaymentRequestButtonElement = null;\n\n  /**\n   * Stripe Elements instance\n   */\n  @readonly\n  @property({ type: Object })\n  readonly elements: Stripe.StripeElements = null;\n\n  /**\n   * Stripe or validation error\n   */\n  @readonly\n  @notify\n  @property({ type: Object, reflect: true, converter: errorConverter })\n  readonly error: null|AmbiguousError = null;\n\n  /**\n   * If the element is focused.\n   */\n  @readonly\n  @notify\n  @property({ type: Boolean, reflect: true })\n  readonly focused: boolean = false;\n\n  /**\n   * Whether the stripe element is ready to receive focus.\n   */\n  @readonly\n  @notify\n  @property({ type: Boolean, reflect: true })\n  readonly ready: boolean = false;\n\n  /**\n   * Stripe instance\n   */\n  @readonly\n  @property({ type: Object })\n  readonly stripe: Stripe.Stripe = null;\n\n  /**\n   * Stripe appearance theme\n   * @see https://stripe.com/docs/stripe-js/appearance-api#theme\n   */\n  @property() theme: 'stripe'|'night'|'flat'|'none' = 'none';\n\n  @property({ attribute: 'border-radius' }) borderRadius?: string;\n  @property({ attribute: 'color-background' }) colorBackground?: string;\n  @property({ attribute: 'color-danger' }) colorDanger?: string;\n  @property({ attribute: 'color-primary' }) colorPrimary?: string;\n  @property({ attribute: 'color-text' }) colorText?: string;\n  @property({ attribute: 'font-family' }) fontFamily?: string;\n  @property({ attribute: 'spacing-unit' }) spacingUnit?: string;\n\n  /* PRIVATE FIELDS */\n\n  private precomputedStyle = getComputedStyle(this);\n\n  private breadcrumb = new BreadcrumbController(this, {\n    slotName: `${(this.constructor as typeof StripeBase).is}-slot`,\n  });\n\n  get stripeMountId() { return this.breadcrumb.mountId; }\n  get stripeMount() { return this.breadcrumb.mount; }\n\n  /* LIFECYCLE */\n\n  /** @inheritdoc */\n  render(): TemplateResult {\n    const { error, showError } = this;\n    const { slotName } = this.breadcrumb;\n    const errorMessage = isStripeElementsError(error) ? error.originalMessage : error?.message;\n    return html`\n      <div id=\"stripe\" part=\"stripe\">\n        <slot id=\"stripe-slot\" name=\"${slotName}\"></slot>\n      </div>\n\n      <output id=\"error\"\n          for=\"stripe\"\n          part=\"error\"\n          ?hidden=\"${!showError}\">\n        ${ifDefined(errorMessage)}\n      </output>\n    `;\n  }\n\n  /** @inheritdoc */\n  protected updated(changed: PropertyValues): void {\n    /* istanbul ignore next */\n    super.updated?.(changed);\n    if (changed.has('error')) this.errorChanged();\n    if (changed.has('publishableKey')) this.init();\n    [...changed.keys()].forEach(this.representationChanged);\n  }\n\n  /** @inheritdoc */\n  async disconnectedCallback(): Promise<void> {\n    super.disconnectedCallback();\n    /* istanbul ignore next */\n    await this.unmount?.();\n  }\n\n  /* PUBLIC API */\n\n  /**\n   * Resets and clears the stripe element.\n   */\n  public reset(): void {\n    /* istanbul ignore next */\n    this.element?.clear?.();\n    this.resetRepresentations();\n    readonly.set<StripeBase>(this, { error: null });\n  }\n\n  /** Blurs the element. */\n  public blur(): void {\n    /* istanbul ignore next */\n    this.element?.blur();\n  }\n\n  /** Focuses the element. */\n  public focus(): void {\n    /* istanbul ignore next */\n    this.element?.focus();\n  }\n\n  /* PRIVATE API */\n\n  /**\n   * Creates a new StripeElementsError\n   */\n  protected createError(message: string): StripeElementsError {\n    return new StripeElementsError((this.constructor as typeof StripeBase).is, message);\n  }\n\n  /**\n   * Clears the Payment Representation and fires an error event\n   */\n  private errorChanged(): void {\n    this.resetRepresentations();\n    this.fireError(this.error);\n  }\n\n  /**\n   * Fires an event.\n   * @param type      event type\n   * @param detail    detail value\n   * @param [opts={}]\n   */\n  protected fire(type: string, detail?: unknown, opts?: EventInit): void {\n    this.dispatchEvent(new CustomEvent(type, { detail, ...opts }));\n  }\n\n  /**\n   * Fires an Error Event\n   */\n  private fireError(error: AmbiguousError): void {\n    this.dispatchEvent(new ErrorEvent('error', { error }));\n  }\n\n  /**\n   * Gets a CSS Custom Property value.\n   * @param   propertyName    CSS Custom Property\n   */\n  protected getCSSCustomPropertyValue(propertyName: string): string {\n    return this.precomputedStyle.getPropertyValue(propertyName);\n  }\n\n  /**\n   * Sets the token or error from the response.\n   * @param   response       Stripe Response\n   * @return\n   */\n  @bound protected async handleResponse(\n    response: StripePaymentResponse\n  ): Promise<StripePaymentResponse> {\n    const { error = null, paymentMethod = null, source = null, token = null } = { ...response };\n    readonly.set<StripeBase>(this, { error, paymentMethod, source, token });\n    await this.updateComplete;\n    if (error) throw error;\n    else return response;\n  }\n\n  /** @abstract */\n  /* istanbul ignore next */\n  protected initElement?(): void | Promise<void> { 'abstract'; }\n\n  /**\n   * Reinitializes Stripe and mounts the element.\n   */\n  private async init(): Promise<void> {\n    await this.unmount();\n    await this.initStripe();\n    await this.initElement();\n    this.initElementListeners();\n    this.breadcrumb.init();\n    this.mount();\n  }\n\n  /**\n   * Adds `ready`, `focus`, and `blur` listeners to the Stripe Element\n   */\n  private initElementListeners(): void {\n    if (!this.element) return;\n    // @ts-expect-error: should still work\n    this.element.on('ready', this.onReady);\n    // @ts-expect-error: should still work\n    this.element.on('focus', this.onFocus);\n    // @ts-expect-error: should still work\n    this.element.on('blur', this.onBlur);\n  }\n\n  /**\n   * Initializes Stripe and elements.\n   */\n  private async initStripe(): Promise<void> {\n    const { publishableKey, stripeAccount, locale } = this;\n    if (!publishableKey)\n      readonly.set<StripeBase>(this, { elements: null, element: null, stripe: null });\n    else {\n      try {\n        const options = { stripeAccount, locale };\n        const stripe =\n          (window.Stripe) ? window.Stripe(publishableKey, options) : await loadStripe(publishableKey, options);\n        const elements = stripe?.elements();\n        readonly.set<StripeBase>(this, { elements, error: null, stripe });\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn(e);\n        const error = this.createError('Stripe.js must be loaded first.');\n        readonly.set<StripeBase>(this, { elements: null, error, stripe: null });\n      } finally {\n        await this.updateComplete;\n      }\n    }\n  }\n\n  /**\n   * Mounts the Stripe Element\n   */\n  private mount(): void {\n    /* istanbul ignore next */\n    if (!this.breadcrumb.mount)\n      throw this.createError('Stripe Mount missing');\n    this.element?.mount(this.breadcrumb.mount as HTMLElement);\n  }\n\n  /**\n   * Unmounts and nullifies the card.\n   */\n  private async unmount(): Promise<void> {\n    this.element?.unmount?.();\n    readonly.set<StripeBase>(this, { element: null });\n    await this.updateComplete;\n  }\n\n  /**\n   * Updates element state when Stripe Element is blurred.\n   */\n  @bound private async onBlur(): Promise<void> {\n    readonly.set<StripeBase>(this, { focused: false });\n    await this.updateComplete;\n  }\n\n  /**\n   * @param  {StripeFocusEvent} event\n   * @private\n   */\n  @bound private async onFocus(): Promise<void> {\n    readonly.set<StripeBase>(this, { focused: true });\n    await this.updateComplete;\n  }\n\n  /**\n   * Sets the `ready` property when the stripe element is ready to receive focus.\n   */\n  @bound private async onReady(event: Stripe.StripeElementChangeEvent): Promise<void> {\n    readonly.set<StripeBase>(this, { ready: true });\n    await this.updateComplete;\n    this.fire('ready', event);\n  }\n\n  /**\n   * POSTs the payment info represenation to the endpoint at `/action`\n   */\n  private async postRepresentation(): Promise<void> {\n    const onError = (error: Error): void => readonly.set<StripeBase>(this, { error });\n    const onSuccess = (success: unknown): void => this.fire('success', success);\n    const token = this.token || undefined;\n    const source = this.source || undefined;\n    const paymentMethod = this.paymentMethod || undefined;\n    const body = JSON.stringify({ token, source, paymentMethod });\n    const headers = { 'Content-Type': 'application/json' };\n    const method = 'POST';\n    return fetch(this.action, { body, headers, method })\n      .then(throwBadResponse)\n      .then(onSuccess)\n      .catch(onError);\n  }\n\n  /**\n   * Updates the state and fires events when the token, source, or payment method is updated.\n   */\n  @bound private representationChanged(name: string): void {\n    if (!isRepresentation(name))\n      return;\n    const value = this[name];\n    /* istanbul ignore if */\n    if (!value)\n      return;\n    this.fire(`${dash(name)}`, value);\n    if (this.action)\n      this.postRepresentation();\n  }\n\n  /**\n   * Resets the Payment Representations\n   */\n  private resetRepresentations(): void {\n    readonly.set<StripeBase>(this, {\n      paymentMethod: null,\n      token: null,\n      source: null,\n    });\n  }\n}\n", "import type { ReactiveController, ReactiveControllerHost } from 'lit';\n\nexport interface BreadcrumbControllerOptions {\n  autoInitialize?: boolean;\n  mountPrefix?: string;\n  slotName?: string;\n}\n\ntype Host = Element|ShadowRoot|Document;\n\n/** Generates a random number */\nexport function getRandom(): string {\n  return (Date.now() + (Math.random() * 1000)).toString(36).substr(0, 8);\n}\n\nexport class BreadcrumbController implements ReactiveController {\n  private initialized = false;\n\n  /**\n   * Breadcrumbs back up to the document.\n   */\n  private shadowHosts: Host[] = [];\n\n  /**\n   * Mount point element ID. This element must be connected to the document.\n   */\n  public mountId: string;\n\n  public slotName: string;\n\n  /**\n   * Mount point element. This element must be connected to the document.\n   */\n  public get mount(): Element { return document.getElementById(this.mountId); }\n\n  constructor(\n    private host: ReactiveControllerHost & Element,\n    private options?: BreadcrumbControllerOptions\n  ) {\n    this.host.addController(this);\n    this.resetMountId();\n    this.slotName = this.options?.slotName ?? `breadcrumb-${getRandom()}`;\n  }\n\n  hostUpdated(): void {\n    if (!this.initialized && this.options.autoInitialize !== false)\n      this.init();\n  }\n\n  hostDisconnected(): void {\n    this.destroyMountPoints();\n  }\n\n  private resetMountId() {\n    const prefix = this.options.mountPrefix ?? this.host.localName;\n    this.mountId = `${prefix}-mount-point-${getRandom()}`;\n  }\n\n  private createMountPoint(): HTMLElement {\n    const node = document.createElement('div');\n    node.id = this.mountId;\n    node.classList.add(`${this.host.tagName.toLowerCase()}-mount`);\n    return node;\n  }\n\n  private createSlot(slotName: string): HTMLSlotElement {\n    const node = document.createElement('slot');\n    node.slot = slotName;\n    node.name = slotName;\n    return node;\n  }\n\n  private appendTemplate(target: Node, node = this.createMountPoint()) {\n    target.appendChild(node);\n    return node;\n  }\n\n  /**\n   * Creates mount points for the slotted element\n   */\n  private initMountPoints(): void {\n    this.initShadowMountPoints();\n  }\n\n  /**\n   * Removes all mount points from the DOM\n   */\n  private destroyMountPoints(): void {\n    // eslint-disable-next-line easy-loops/easy-loops\n    for (const host of this.shadowHosts) {\n      for (const el of host.querySelectorAll(`[slot=\"${this.slotName}\"][name=\"${this.slotName}\"]`))\n        el.remove();\n    }\n    if (this.mount)\n      this.mount.remove();\n    this.resetMountId();\n  }\n\n  /**\n   * Prepares to mount Stripe Elements in light DOM.\n   */\n  private initShadowMountPoints(): void {\n    // trace each shadow boundary between us and the document\n    let host = this.host as Element;\n    this.shadowHosts = [this.host];\n    while (host = (host.getRootNode() as ShadowRoot).host) // eslint-disable-line easy-loops/easy-loops, no-cond-assign, prefer-destructuring\n      this.shadowHosts.push(host);\n\n    const { shadowHosts, slotName } = this;\n\n    // Prepare the shallowest breadcrumb slot at document level\n    const hosts = [...shadowHosts];\n    const root = hosts.pop();\n    if (!root.querySelector(`[slot=\"${slotName}\"]`)) {\n      const div = document.createElement('div');\n      div.slot = slotName;\n      root.appendChild(div);\n    }\n\n    const container = root.querySelector(`[slot=\"${slotName}\"]`);\n\n    // Render the form to the document, so that the slotted content can mount\n    this.appendTemplate(container);\n\n    // Append breadcrumb slots to each shadowroot in turn,\n    // from the document down to the <stripe-elements> instance.\n    hosts.forEach(host => this.appendTemplate(host, this.createSlot(slotName)));\n  }\n\n  public init() {\n    this.destroyMountPoints();\n    this.initMountPoints();\n    this.initialized = true;\n  }\n}\n", "function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar V3_URL = 'https://js.stripe.com/v3';\nvar V3_URL_REGEX = /^https:\\/\\/js\\.stripe\\.com\\/v3\\/?(\\?.*)?$/;\nvar EXISTING_SCRIPT_MESSAGE = 'loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used';\nvar findScript = function findScript() {\n  var scripts = document.querySelectorAll(\"script[src^=\\\"\".concat(V3_URL, \"\\\"]\"));\n\n  for (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i];\n\n    if (!V3_URL_REGEX.test(script.src)) {\n      continue;\n    }\n\n    return script;\n  }\n\n  return null;\n};\n\nvar injectScript = function injectScript(params) {\n  var queryString = params && !params.advancedFraudSignals ? '?advancedFraudSignals=false' : '';\n  var script = document.createElement('script');\n  script.src = \"\".concat(V3_URL).concat(queryString);\n  var headOrBody = document.head || document.body;\n\n  if (!headOrBody) {\n    throw new Error('Expected document.body not to be null. Stripe.js requires a <body> element.');\n  }\n\n  headOrBody.appendChild(script);\n  return script;\n};\n\nvar registerWrapper = function registerWrapper(stripe, startTime) {\n  if (!stripe || !stripe._registerWrapper) {\n    return;\n  }\n\n  stripe._registerWrapper({\n    name: 'stripe-js',\n    version: \"1.32.0\",\n    startTime: startTime\n  });\n};\n\nvar stripePromise = null;\nvar loadScript = function loadScript(params) {\n  // Ensure that we only attempt to load Stripe.js at most once\n  if (stripePromise !== null) {\n    return stripePromise;\n  }\n\n  stripePromise = new Promise(function (resolve, reject) {\n    if (typeof window === 'undefined') {\n      // Resolve to null when imported server side. This makes the module\n      // safe to import in an isomorphic code base.\n      resolve(null);\n      return;\n    }\n\n    if (window.Stripe && params) {\n      console.warn(EXISTING_SCRIPT_MESSAGE);\n    }\n\n    if (window.Stripe) {\n      resolve(window.Stripe);\n      return;\n    }\n\n    try {\n      var script = findScript();\n\n      if (script && params) {\n        console.warn(EXISTING_SCRIPT_MESSAGE);\n      } else if (!script) {\n        script = injectScript(params);\n      }\n\n      script.addEventListener('load', function () {\n        if (window.Stripe) {\n          resolve(window.Stripe);\n        } else {\n          reject(new Error('Stripe.js not available'));\n        }\n      });\n      script.addEventListener('error', function () {\n        reject(new Error('Failed to load Stripe.js'));\n      });\n    } catch (error) {\n      reject(error);\n      return;\n    }\n  });\n  return stripePromise;\n};\nvar initStripe = function initStripe(maybeStripe, args, startTime) {\n  if (maybeStripe === null) {\n    return null;\n  }\n\n  var stripe = maybeStripe.apply(undefined, args);\n  registerWrapper(stripe, startTime);\n  return stripe;\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nvar validateLoadParams = function validateLoadParams(params) {\n  var errorMessage = \"invalid load parameters; expected object of shape\\n\\n    {advancedFraudSignals: boolean}\\n\\nbut received\\n\\n    \".concat(JSON.stringify(params), \"\\n\");\n\n  if (params === null || _typeof(params) !== 'object') {\n    throw new Error(errorMessage);\n  }\n\n  if (Object.keys(params).length === 1 && typeof params.advancedFraudSignals === 'boolean') {\n    return params;\n  }\n\n  throw new Error(errorMessage);\n};\n\nvar loadParams;\nvar loadStripeCalled = false;\nvar loadStripe = function loadStripe() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  loadStripeCalled = true;\n  var startTime = Date.now();\n  return loadScript(loadParams).then(function (maybeStripe) {\n    return initStripe(maybeStripe, args, startTime);\n  });\n};\n\nloadStripe.setLoadParameters = function (params) {\n  if (loadStripeCalled) {\n    throw new Error('You cannot change load parameters after calling loadStripe');\n  }\n\n  loadParams = validateLoadParams(params);\n};\n\nexport { loadStripe };\n", "import {css} from 'lit';\nexport const styles = css`[hidden] {\n  display: none !important;\n}\n\n:host:not([hidden]) {\n  display: block;\n  box-sizing: border-box;\n}\n\n#error {\n  font-family: sans-serif;\n  font-size: 14px;\n  padding-left: 42px;\n  padding-bottom: 10px;\n}\n`;\nexport default styles;\n", "import {css} from 'lit';\nexport const styles = css`#stripe {\n  box-sizing: border-box;\n  min-width: var(--stripe-payment-request-element-min-width, 300px);\n  padding: var(--stripe-payment-request-element-padding, 8px 12px);\n  background: var(--stripe-payment-request-element-background, white);\n}\n`;\nexport default styles;\n"],
  "mappings": "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",
  "names": []
}
