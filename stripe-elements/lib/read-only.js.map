{
  "version": 3,
  "sources": ["../src/lib/read-only.ts"],
  "sourcesContent": ["import type { ReactiveController, ReactiveElement, ReactiveControllerHost } from 'lit';\n\nfunction isReactiveElement(host: ReactiveControllerHost): host is ReactiveElement {\n  return 'addInitializer' in host.constructor;\n}\n\nclass ReadOnlyController implements ReactiveController {\n  private static instances = new Map<ReactiveControllerHost, ReadOnlyController>();\n\n  static for(host: ReactiveControllerHost) {\n    return new ReadOnlyController(host);\n  }\n\n  values = new Map();\n\n  hostConnected() { null; }\n\n  constructor(private host: ReactiveControllerHost) {\n    if (ReadOnlyController.instances.has(host))\n      return ReadOnlyController.instances.get(host) as this;\n    host.addController(this);\n    ReadOnlyController.instances.set(host, this);\n  }\n\n  set(key: string, value: unknown) {\n    const old = this.values.get(key);\n    this.values.set(key, value);\n    if (isReactiveElement(this.host))\n      this.host.requestUpdate(key, old);\n    else\n      this.host.requestUpdate();\n  }\n}\n\n\nexport function readonly<T extends ReactiveElement>(proto: T, key: string) {\n  const Klass = (proto.constructor as typeof ReactiveElement);\n  Klass.addInitializer(x => {\n    const controller = ReadOnlyController.for(x);\n\n    // controller.values.set(key, x[key]);\n\n    Object.defineProperty(x.constructor.prototype, key, {\n      enumerable: true,\n      configurable: true,\n      get() {\n        return controller.values.get(key);\n      },\n\n      /** allow for class field initialization */\n      set(value) {\n        if (!controller.values.has(key))\n          controller.values.set(key, value);\n      },\n    });\n\n    Klass.createProperty(key, {\n      ...Klass.getPropertyOptions(key),\n      noAccessor: true,\n    });\n  });\n}\n\nreadonly.set = function<T extends ReactiveControllerHost>(host: T, props: Partial<T>) {\n  const controller = ReadOnlyController.for(host);\n  for (const [key, value] of Object.entries(props))\n    controller.set(key, value);\n};\n"],
  "mappings": ";;;AAEA,2BAA2B,MAAuD;AAChF,SAAO,oBAAoB,KAAK;AAClC;AAEA,IAAM,sBAAN,MAAuD;AAAA,EAWrD,YAAoB,MAA8B;AAA9B;AAJpB,kBAAS,oBAAI,IAAI;AAKf,QAAI,oBAAmB,UAAU,IAAI,IAAI;AACvC,aAAO,oBAAmB,UAAU,IAAI,IAAI;AAC9C,SAAK,cAAc,IAAI;AACvB,wBAAmB,UAAU,IAAI,MAAM,IAAI;AAAA,EAC7C;AAAA,EAbA,OAAO,IAAI,MAA8B;AACvC,WAAO,IAAI,oBAAmB,IAAI;AAAA,EACpC;AAAA,EAIA,gBAAgB;AAAE;AAAA,EAAM;AAAA,EASxB,IAAI,KAAa,OAAgB;AAC/B,UAAM,MAAM,KAAK,OAAO,IAAI,GAAG;AAC/B,SAAK,OAAO,IAAI,KAAK,KAAK;AAC1B,QAAI,kBAAkB,KAAK,IAAI;AAC7B,WAAK,KAAK,cAAc,KAAK,GAAG;AAAA;AAEhC,WAAK,KAAK,cAAc;AAAA,EAC5B;AACF;AA1BA,IAAM,qBAAN;AACE,AADI,mBACW,YAAY,oBAAI,IAAgD;AA4B1E,kBAA6C,OAAU,KAAa;AACzE,QAAM,QAAS,MAAM;AACrB,QAAM,eAAe,OAAK;AACxB,UAAM,aAAa,mBAAmB,IAAI,CAAC;AAI3C,WAAO,eAAe,EAAE,YAAY,WAAW,KAAK;AAAA,MAClD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,MAAM;AACJ,eAAO,WAAW,OAAO,IAAI,GAAG;AAAA,MAClC;AAAA,MAGA,IAAI,OAAO;AACT,YAAI,CAAC,WAAW,OAAO,IAAI,GAAG;AAC5B,qBAAW,OAAO,IAAI,KAAK,KAAK;AAAA,MACpC;AAAA,IACF,CAAC;AAED,UAAM,eAAe,KAAK;AAAA,MACxB,GAAG,MAAM,mBAAmB,GAAG;AAAA,MAC/B,YAAY;AAAA,IACd,CAAC;AAAA,EACH,CAAC;AACH;AAEA,SAAS,MAAM,SAA2C,MAAS,OAAmB;AACpF,QAAM,aAAa,mBAAmB,IAAI,IAAI;AAC9C,aAAW,CAAC,KAAK,UAAU,OAAO,QAAQ,KAAK;AAC7C,eAAW,IAAI,KAAK,KAAK;AAC7B;",
  "names": []
}
